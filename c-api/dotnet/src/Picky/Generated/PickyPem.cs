// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// Picky PEM object.
/// </summary>
public partial class PickyPem: IDisposable
{
    private unsafe Raw.PickyPem* _inner;

    public ulong DataLength
    {
        get
        {
            return GetDataLength();
        }
    }

    public string Label
    {
        get
        {
            return GetLabel();
        }
    }

    /// <summary>
    /// Creates a managed <c>PickyPem</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PickyPem(Raw.PickyPem* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Creates a PEM object with the given label and data.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PickyPem</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static PickyPem New(string label, byte[] data)
    {
        unsafe
        {
            byte[] labelBuf = DiplomatUtils.StringToUtf8(label);
            nuint dataLength = (nuint)data.Length;
            nuint labelBufLength = (nuint)labelBuf.Length;
            fixed (byte* dataPtr = data)
            {
                fixed (byte* labelBufPtr = labelBuf)
                {
                    Raw.PemFfiResultBoxPickyPemBoxPickyError result = Raw.PickyPem.New(labelBufPtr, labelBufLength, dataPtr, dataLength);
                    if (!result.isOk)
                    {
                        throw new PickyException(new PickyError(result.Err));
                    }
                    Raw.PickyPem* retVal = result.Ok;
                    return new PickyPem(retVal);
                }
            }
        }
    }

    /// <summary>
    /// Loads a PEM from the filesystem.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PickyPem</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static PickyPem LoadFromFile(string path)
    {
        unsafe
        {
            byte[] pathBuf = DiplomatUtils.StringToUtf8(path);
            nuint pathBufLength = (nuint)pathBuf.Length;
            fixed (byte* pathBufPtr = pathBuf)
            {
                Raw.PemFfiResultBoxPickyPemBoxPickyError result = Raw.PickyPem.LoadFromFile(pathBufPtr, pathBufLength);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.PickyPem* retVal = result.Ok;
                return new PickyPem(retVal);
            }
        }
    }

    /// <summary>
    /// Saves this PEM object to the filesystem.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    public void SaveToFile(string path)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            byte[] pathBuf = DiplomatUtils.StringToUtf8(path);
            nuint pathBufLength = (nuint)pathBuf.Length;
            fixed (byte* pathBufPtr = pathBuf)
            {
                Raw.PemFfiResultVoidBoxPickyError result = Raw.PickyPem.SaveToFile(_inner, pathBufPtr, pathBufLength);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
            }
        }
    }

    /// <summary>
    /// Parses a PEM-encoded string representation.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PickyPem</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static PickyPem Parse(string input)
    {
        unsafe
        {
            byte[] inputBuf = DiplomatUtils.StringToUtf8(input);
            nuint inputBufLength = (nuint)inputBuf.Length;
            fixed (byte* inputBufPtr = inputBuf)
            {
                Raw.PemFfiResultBoxPickyPemBoxPickyError result = Raw.PickyPem.Parse(inputBufPtr, inputBufLength);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.PickyPem* retVal = result.Ok;
                return new PickyPem(retVal);
            }
        }
    }

    /// <summary>
    /// Returns the length of the data contained by this PEM object.
    /// </summary>
    public ulong GetDataLength()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            ulong retVal = Raw.PickyPem.GetDataLength(_inner);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the label of this PEM object.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    public void GetLabel(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            Raw.PemFfiResultVoidBoxPickyError result = Raw.PickyPem.GetLabel(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <summary>
    /// Returns the label of this PEM object.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    public string GetLabel()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.PemFfiResultVoidBoxPickyError result = Raw.PickyPem.GetLabel(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Returns the string representation of this PEM object.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    public void ToRepr(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            Raw.PemFfiResultVoidBoxPickyError result = Raw.PickyPem.ToRepr(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <summary>
    /// Returns the string representation of this PEM object.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    public string ToRepr()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.PemFfiResultVoidBoxPickyError result = Raw.PickyPem.ToRepr(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PickyPem* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Marks this object as moved into Rust side.
    /// </summary>
    public void MarkAsMoved()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyPem");
            }
            _inner = null;
        }
    }

    /// <summary>
    /// Restores unmanaged ressource handle to this object.
    /// </summary>
    public unsafe void RestoreHandle(Raw.PickyPem* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PickyPem.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PickyPem()
    {
        Dispose();
    }
}
