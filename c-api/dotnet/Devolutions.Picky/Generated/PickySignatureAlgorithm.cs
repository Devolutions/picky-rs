// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class PickySignatureAlgorithm: IDisposable
{
    private unsafe Raw.PickySignatureAlgorithm* _inner;

    /// <summary>
    /// Creates a managed <c>PickySignatureAlgorithm</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PickySignatureAlgorithm(Raw.PickySignatureAlgorithm* handle)
    {
        _inner = handle;
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PickySignatureAlgorithm</c> allocated on Rust side.
    /// If a custom Drop implementation is implemented on Rust side, it WILL run on destruction.
    /// </returns>
    public static PickySignatureAlgorithm NewRsaPkcs1v15(PickyHashAlgorithm hashAlgorithm)
    {
        unsafe
        {
            Raw.PickyHashAlgorithm hashAlgorithmRaw;
            hashAlgorithmRaw = (Raw.PickyHashAlgorithm)hashAlgorithm;
            Raw.SignatureFfiResultBoxPickySignatureAlgorithmBoxPickyError result = Raw.PickySignatureAlgorithm.NewRsaPkcs1v15(hashAlgorithmRaw);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.PickySignatureAlgorithm* retVal = result.Ok;
            return new PickySignatureAlgorithm(retVal);
        }
    }

    /// <exception cref="PickyException"></exception>
    public void Verify(PickyPublicKey publicKey, byte[] msg, byte[] signature)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySignatureAlgorithm");
            }
            nuint msgLength = (nuint)msg.Length;
            nuint signatureLength = (nuint)signature.Length;
            Raw.PickyPublicKey* publicKeyRaw;
            publicKeyRaw = publicKey.AsFFI();
            if (publicKeyRaw == null)
            {
                throw new ObjectDisposedException("PickyPublicKey");
            }
            fixed (byte* msgPtr = msg)
            {
                fixed (byte* signaturePtr = signature)
                {
                    Raw.SignatureFfiResultVoidBoxPickyError result = Raw.PickySignatureAlgorithm.Verify(_inner, publicKeyRaw, msgPtr, msgLength, signaturePtr, signatureLength);
                    if (!result.isOk)
                    {
                        throw new PickyException(new PickyError(result.Err));
                    }
                }
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PickySignatureAlgorithm* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Marks this object as moved into Rust side.
    /// </summary>
    public void MarkAsMoved()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickySignatureAlgorithm");
            }
            _inner = null;
        }
    }

    /// <summary>
    /// Restores unmanaged ressource handle to this object.
    /// </summary>
    public unsafe void RestoreHandle(Raw.PickySignatureAlgorithm* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PickySignatureAlgorithm.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PickySignatureAlgorithm()
    {
        Dispose();
    }
}
