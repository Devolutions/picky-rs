// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky.Raw;

#nullable enable

/// <summary>
/// SSH Certificate Builder.
/// </summary>
[StructLayout(LayoutKind.Sequential)]
public partial struct SshCertBuilder
{
    private const string NativeLib = "picky";

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_init", ExactSpelling = true)]
    public static unsafe extern SshCertBuilder* Init();

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_cert_key_type", ExactSpelling = true)]
    public static unsafe extern void SetCertKeyType(SshCertBuilder* self, SshCertKeyType keyType);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_key", ExactSpelling = true)]
    public static unsafe extern void SetKey(SshCertBuilder* self, SshPublicKey* key);

    /// <summary>
    /// Optional (set to 0 by default)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_serial", ExactSpelling = true)]
    public static unsafe extern void SetSerial(SshCertBuilder* self, ulong serial);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_cert_type", ExactSpelling = true)]
    public static unsafe extern void SetCertType(SshCertBuilder* self, SshCertType certType);

    /// <summary>
    /// Optional
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_key_id", ExactSpelling = true)]
    public static unsafe extern void SetKeyId(SshCertBuilder* self, byte* keyId, nuint keyIdSz);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_valid_before", ExactSpelling = true)]
    public static unsafe extern void SetValidBefore(SshCertBuilder* self, ulong validBefore);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_valid_after", ExactSpelling = true)]
    public static unsafe extern void SetValidAfter(SshCertBuilder* self, ulong validAfter);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_signature_key", ExactSpelling = true)]
    public static unsafe extern void SetSignatureKey(SshCertBuilder* self, SshPrivateKey* signatureKey);

    /// <summary>
    /// Optional. RsaPkcs1v15 with SHA256 is used by default.
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_signature_algo", ExactSpelling = true)]
    public static unsafe extern void SetSignatureAlgo(SshCertBuilder* self, SignatureAlgorithm* signatureAlgo);

    /// <summary>
    /// Optional
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_set_comment", ExactSpelling = true)]
    public static unsafe extern void SetComment(SshCertBuilder* self, byte* comment, nuint commentSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_build", ExactSpelling = true)]
    public static unsafe extern SshFfiResultBoxSshCertBoxPickyError Build(SshCertBuilder* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SshCertBuilder_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(SshCertBuilder* self);
}
