// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky.Raw;

#nullable enable

/// <summary>
/// SSH Certificate Builder.
/// </summary>
[StructLayout(LayoutKind.Sequential)]
public partial struct PickySshCertBuilder
{
    private const string NativeLib = "picky";

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_init", ExactSpelling = true)]
    public static unsafe extern PickySshCertBuilder* Init();

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_cert_key_type", ExactSpelling = true)]
    public static unsafe extern void SetCertKeyType(PickySshCertBuilder* self, PickySshCertKeyType keyType);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_key", ExactSpelling = true)]
    public static unsafe extern void SetKey(PickySshCertBuilder* self, PickySshPublicKey* key);

    /// <summary>
    /// Optional (set to 0 by default)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_serial", ExactSpelling = true)]
    public static unsafe extern void SetSerial(PickySshCertBuilder* self, ulong serial);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_cert_type", ExactSpelling = true)]
    public static unsafe extern void SetCertType(PickySshCertBuilder* self, PickySshCertType certType);

    /// <summary>
    /// Optional
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_key_id", ExactSpelling = true)]
    public static unsafe extern void SetKeyId(PickySshCertBuilder* self, byte* keyId, nuint keyIdSz);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_valid_before", ExactSpelling = true)]
    public static unsafe extern void SetValidBefore(PickySshCertBuilder* self, PickySshTime* validBefore);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_valid_after", ExactSpelling = true)]
    public static unsafe extern void SetValidAfter(PickySshCertBuilder* self, PickySshTime* validAfter);

    /// <summary>
    /// Required
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_signature_key", ExactSpelling = true)]
    public static unsafe extern void SetSignatureKey(PickySshCertBuilder* self, PickySshPrivateKey* signatureKey);

    /// <summary>
    /// Optional. RsaPkcs1v15 with SHA256 is used by default.
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_signature_algo", ExactSpelling = true)]
    public static unsafe extern void SetSignatureAlgo(PickySshCertBuilder* self, PickySignatureAlgorithm* signatureAlgo);

    /// <summary>
    /// Optional
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_set_comment", ExactSpelling = true)]
    public static unsafe extern void SetComment(PickySshCertBuilder* self, byte* comment, nuint commentSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_build", ExactSpelling = true)]
    public static unsafe extern SshFfiResultBoxPickySshCertBoxPickyError Build(PickySshCertBuilder* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PickySshCertBuilder_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(PickySshCertBuilder* self);
}
