#!/usr/bin/env -S just --justfile

# This is just intended to help developer, no need in CI #

############ `just` is required ##############
# ------------------------------------------ #
# https://github.com/casey/just#installation #
# ------------------------------------------ #
# Easy way is: cargo install just            #
##############################################

default: libpicky bindings

## Native library ##

lib_path       := "../target/debug/libpicky.a"

libpicky:
    cargo build -p picky-c-api

## Bindings ##

bindings: c_bindings csharp_bindings

include_folder := "include/"
header_path    := include_folder + "picky.h"

c_bindings:
    cbindgen --crate picky-c-api --config cbindgen.toml --output "{{header_path}}"
    @echo "C header generated at {{header_path}}"

csharp_bindings:

## Examples ##

examples_folder     := "./examples/"
examples_out_folder := examples_folder + "out/"
common_gcc_args     := lib_path + " -I" + include_folder + " -lm"

examples: pem

pem: libpicky make_examples_output_directory
    gcc {{examples_folder}}pem.c {{common_gcc_args}} -o {{examples_out_folder}}pem

make_examples_output_directory:
    mkdir -p {{examples_out_folder}}

clean:
    -rm -rf {{examples_out_folder}}

## Tests ##

test: test_pem

pem_path := "../test_assets/intermediate_ca.crt"

test_pem: pem
    #!/usr/bin/env nu

    let $output = ({{examples_out_folder}}pem {{pem_path}})
    let $output = ($output | lines | parse "label = {label}, len = {len}")

    let $expected_label = "CERTIFICATE"
    let $expected_len = "835"

    if $output.label == $expected_label && $output.len == $expected_len {
        echo "test_pem: success"
    } {
        echo $"test_pem: failed(char nl)"
        echo $"expected:(char nl)"
        echo [[label, len]; [$expected_label, $expected_len]]
        echo $"output:(char nl)"
        echo $output
        exit 1
    }

