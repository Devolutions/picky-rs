// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class AuthenticodeTimestamper: IDisposable
{
    private unsafe Raw.AuthenticodeTimestamper* _inner;

    /// <summary>
    /// Creates a managed <c>AuthenticodeTimestamper</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe AuthenticodeTimestamper(Raw.AuthenticodeTimestamper* handle)
    {
        _inner = handle;
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>AuthenticodeTimestamper</c> allocated on Rust side.
    /// </returns>
    public static AuthenticodeTimestamper New(string url)
    {
        unsafe
        {
            byte[] urlBuf = DiplomatUtils.StringToUtf8(url);
            nuint urlBufLength = (nuint)urlBuf.Length;
            fixed (byte* urlBufPtr = urlBuf)
            {
                IntPtr resultPtr = Raw.AuthenticodeTimestamper.New(urlBufPtr, urlBufLength);
                Raw.X509AuthenticodeFfiResultBoxAuthenticodeTimestamperBoxPickyError result = Marshal.PtrToStructure<Raw.X509AuthenticodeFfiResultBoxAuthenticodeTimestamperBoxPickyError>(resultPtr);
                Raw.X509AuthenticodeFfiResultBoxAuthenticodeTimestamperBoxPickyError.Destroy(resultPtr);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.AuthenticodeTimestamper* retVal = result.Ok;
                return new AuthenticodeTimestamper(retVal);
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Pkcs7</c> allocated on Rust side.
    /// </returns>
    public Pkcs7 Timestamp(RsBuffer digest, HashAlgorithm hashAlgo)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeTimestamper");
            }
            Raw.RsBuffer* digestRaw;
            digestRaw = digest.AsFFI();
            if (digestRaw == null)
            {
                throw new ObjectDisposedException("RsBuffer");
            }
            Raw.HashAlgorithm hashAlgoRaw;
            hashAlgoRaw = (Raw.HashAlgorithm)hashAlgo;
            IntPtr resultPtr = Raw.AuthenticodeTimestamper.Timestamp(_inner, digestRaw, hashAlgoRaw);
            Raw.X509AuthenticodeFfiResultBoxPkcs7BoxPickyError result = Marshal.PtrToStructure<Raw.X509AuthenticodeFfiResultBoxPkcs7BoxPickyError>(resultPtr);
            Raw.X509AuthenticodeFfiResultBoxPkcs7BoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.Pkcs7* retVal = result.Ok;
            return new Pkcs7(retVal);
        }
    }

    public void ModifySignedData(Pkcs7 token, SignedData signedData)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeTimestamper");
            }
            Raw.Pkcs7* tokenRaw;
            tokenRaw = token.AsFFI();
            if (tokenRaw == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            Raw.SignedData* signedDataRaw;
            signedDataRaw = signedData.AsFFI();
            if (signedDataRaw == null)
            {
                throw new ObjectDisposedException("SignedData");
            }
            Raw.AuthenticodeTimestamper.ModifySignedData(_inner, tokenRaw, signedDataRaw);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.AuthenticodeTimestamper* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.AuthenticodeTimestamper.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~AuthenticodeTimestamper()
    {
        Dispose();
    }
}
