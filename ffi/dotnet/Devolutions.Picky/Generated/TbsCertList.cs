// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class TbsCertList: IDisposable
{
    private unsafe Raw.TbsCertList* _inner;

    public ExtensionIterator? Extenstions
    {
        get
        {
            return GetExtenstions();
        }
    }

    public string Issuer
    {
        get
        {
            return GetIssuer();
        }
    }

    public Time? NextUpdate
    {
        get
        {
            return GetNextUpdate();
        }
    }

    public RevokedCertificateIterator? RevokedCertificates
    {
        get
        {
            return GetRevokedCertificates();
        }
    }

    public AlgorithmIdentifier SignatureAlgorithm
    {
        get
        {
            return GetSignatureAlgorithm();
        }
    }

    public Time ThisUpate
    {
        get
        {
            return GetThisUpate();
        }
    }

    public Version Version
    {
        get
        {
            return GetVersion();
        }
    }

    /// <summary>
    /// Creates a managed <c>TbsCertList</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe TbsCertList(Raw.TbsCertList* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>Version</c> allocated on C# side.
    /// </returns>
    public Version GetVersion()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.Version retVal = Raw.TbsCertList.GetVersion(_inner);
            return (Version)retVal;
        }
    }

    /// <returns>
    /// A <c>AlgorithmIdentifier</c> allocated on Rust side.
    /// </returns>
    public AlgorithmIdentifier GetSignatureAlgorithm()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.AlgorithmIdentifier* retVal = Raw.TbsCertList.GetSignatureAlgorithm(_inner);
            return new AlgorithmIdentifier(retVal);
        }
    }

    /// <exception cref="PickyException"></exception>
    public void GetIssuer(DiplomatWriteable writable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.X509AttributeFfiResultVoidBoxPickyError result = Raw.TbsCertList.GetIssuer(_inner, &writable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public string GetIssuer()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.X509AttributeFfiResultVoidBoxPickyError result = Raw.TbsCertList.GetIssuer(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <returns>
    /// A <c>Time</c> allocated on Rust side.
    /// </returns>
    public Time GetThisUpate()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.Time* retVal = Raw.TbsCertList.GetThisUpate(_inner);
            return new Time(retVal);
        }
    }

    /// <returns>
    /// A <c>Time</c> allocated on Rust side.
    /// </returns>
    public Time? GetNextUpdate()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.Time* retVal = Raw.TbsCertList.GetNextUpdate(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new Time(retVal);
        }
    }

    /// <returns>
    /// A <c>RevokedCertificateIterator</c> allocated on Rust side.
    /// </returns>
    public RevokedCertificateIterator? GetRevokedCertificates()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.RevokedCertificateIterator* retVal = Raw.TbsCertList.GetRevokedCertificates(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new RevokedCertificateIterator(retVal);
        }
    }

    /// <returns>
    /// A <c>ExtensionIterator</c> allocated on Rust side.
    /// </returns>
    public ExtensionIterator? GetExtenstions()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TbsCertList");
            }
            Raw.ExtensionIterator* retVal = Raw.TbsCertList.GetExtenstions(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new ExtensionIterator(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.TbsCertList* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.TbsCertList.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~TbsCertList()
    {
        Dispose();
    }
}
