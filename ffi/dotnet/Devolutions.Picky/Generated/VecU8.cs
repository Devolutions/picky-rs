// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class VecU8: IDisposable
{
    private unsafe Raw.VecU8* _inner;

    public nuint Length
    {
        get
        {
            return GetLength();
        }
    }

    /// <summary>
    /// Creates a managed <c>VecU8</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe VecU8(Raw.VecU8* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public static VecU8 FromBytes(byte[] bytes)
    {
        unsafe
        {
            nuint bytesLength = (nuint)bytes.Length;
            fixed (byte* bytesPtr = bytes)
            {
                Raw.VecU8* retVal = Raw.VecU8.FromBytes(bytesPtr, bytesLength);
                return new VecU8(retVal);
            }
        }
    }

    public nuint GetLength()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("VecU8");
            }
            nuint retVal = Raw.VecU8.GetLength(_inner);
            return retVal;
        }
    }

    /// <exception cref="BufferTooSmallException"></exception>
    public void Fill(byte[] buffer)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("VecU8");
            }
            nuint bufferLength = (nuint)buffer.Length;
            fixed (byte* bufferPtr = buffer)
            {
                IntPtr resultPtr = Raw.VecU8.Fill(_inner, bufferPtr, bufferLength);
                Raw.UtilsFfiResultVoidBoxBufferTooSmallError result = Marshal.PtrToStructure<Raw.UtilsFfiResultVoidBoxBufferTooSmallError>(resultPtr);
                Raw.UtilsFfiResultVoidBoxBufferTooSmallError.Destroy(resultPtr);
                if (!result.isOk)
                {
                    throw new BufferTooSmallException(new BufferTooSmallError(result.Err));
                }
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.VecU8* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.VecU8.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~VecU8()
    {
        Dispose();
    }
}
