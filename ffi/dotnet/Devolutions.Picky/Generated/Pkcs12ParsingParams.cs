// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class Pkcs12ParsingParams: IDisposable
{
    private unsafe Raw.Pkcs12ParsingParams* _inner;

    public bool SkipDecryptionErrors
    {
        set
        {
            SetSkipDecryptionErrors(value);
        }
    }

    public bool SkipMacValidation
    {
        set
        {
            SetSkipMacValidation(value);
        }
    }

    public bool SkipSoftParsingErrors
    {
        set
        {
            SetSkipSoftParsingErrors(value);
        }
    }

    /// <summary>
    /// Creates a managed <c>Pkcs12ParsingParams</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Pkcs12ParsingParams(Raw.Pkcs12ParsingParams* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>Pkcs12ParsingParams</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12ParsingParams New()
    {
        unsafe
        {
            Raw.Pkcs12ParsingParams* retVal = Raw.Pkcs12ParsingParams.New();
            return new Pkcs12ParsingParams(retVal);
        }
    }

    /// <summary>
    /// Continue parsing even if conversion to high level picky data structure fails (e.g. due to
    /// unsupported private key or certificate kind)
    /// </summary>
    public void SetSkipSoftParsingErrors(bool value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs12ParsingParams");
            }
            Raw.Pkcs12ParsingParams.SetSkipSoftParsingErrors(_inner, value);
        }
    }

    /// <summary>
    /// Continue parsing even if decryption fails and keep data in encrypted form
    /// </summary>
    public void SetSkipDecryptionErrors(bool value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs12ParsingParams");
            }
            Raw.Pkcs12ParsingParams.SetSkipDecryptionErrors(_inner, value);
        }
    }

    /// <summary>
    /// Continue parsing even if MAC validation fails.
    /// </summary>
    /// <remarks>
    /// This is useful for parsing available unencrypted data from
    /// password-protected PFX files. Also could be useful if PFX integrity has been intentionally
    /// violated for testing purposes.
    /// </remarks>
    public void SetSkipMacValidation(bool value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs12ParsingParams");
            }
            Raw.Pkcs12ParsingParams.SetSkipMacValidation(_inner, value);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Pkcs12ParsingParams* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Pkcs12ParsingParams.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Pkcs12ParsingParams()
    {
        Dispose();
    }
}
