// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class Argon2Params: IDisposable
{
    private unsafe Raw.Argon2Params* _inner;

    public uint MCost
    {
        set
        {
            SetMCost(value);
        }
    }

    public nuint OutputLen
    {
        set
        {
            SetOutputLen(value);
        }
    }

    public uint PCost
    {
        set
        {
            SetPCost(value);
        }
    }

    public uint TCost
    {
        set
        {
            SetTCost(value);
        }
    }

    /// <summary>
    /// Creates a managed <c>Argon2Params</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Argon2Params(Raw.Argon2Params* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Create new parameters.
    /// </summary>
    /// <returns>
    /// A <c>Argon2Params</c> allocated on Rust side.
    /// </returns>
    public static Argon2Params New()
    {
        unsafe
        {
            Raw.Argon2Params* retVal = Raw.Argon2Params.New();
            return new Argon2Params(retVal);
        }
    }

    /// <summary>
    /// Sets the memory size in 1 KiB blocks. Between 1 and (2^32)-1.
    /// </summary>
    public void SetMCost(uint value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Argon2Params");
            }
            Raw.Argon2Params.SetMCost(_inner, value);
        }
    }

    /// <summary>
    /// Sets the number of iterations. Between 1 and (2^32)-1.
    /// </summary>
    public void SetTCost(uint value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Argon2Params");
            }
            Raw.Argon2Params.SetTCost(_inner, value);
        }
    }

    /// <summary>
    /// Sets the degree of parallelism. Between 1 and 255.
    /// </summary>
    public void SetPCost(uint value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Argon2Params");
            }
            Raw.Argon2Params.SetPCost(_inner, value);
        }
    }

    /// <summary>
    /// Sets the size of the KDF output in bytes. Default 32.
    /// </summary>
    public void SetOutputLen(nuint value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Argon2Params");
            }
            Raw.Argon2Params.SetOutputLen(_inner, value);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Argon2Params* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Argon2Params.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Argon2Params()
    {
        Dispose();
    }
}
