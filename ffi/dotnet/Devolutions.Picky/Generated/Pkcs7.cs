// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class Pkcs7: IDisposable
{
    private unsafe Raw.Pkcs7* _inner;

    /// <summary>
    /// Creates a managed <c>Pkcs7</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Pkcs7(Raw.Pkcs7* handle)
    {
        _inner = handle;
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Pkcs7</c> allocated on Rust side.
    /// </returns>
    public static Pkcs7 FromDer(byte[] data)
    {
        unsafe
        {
            nuint dataLength = (nuint)data.Length;
            fixed (byte* dataPtr = data)
            {
                IntPtr resultPtr = Raw.Pkcs7.FromDer(dataPtr, dataLength);
                Raw.Pkcs7FfiResultBoxPkcs7BoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs7FfiResultBoxPkcs7BoxPickyError>(resultPtr);
                Raw.Pkcs7FfiResultBoxPkcs7BoxPickyError.Destroy(resultPtr);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.Pkcs7* retVal = result.Ok;
                return new Pkcs7(retVal);
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Pkcs7</c> allocated on Rust side.
    /// </returns>
    public static Pkcs7 FromPem(Pem pem)
    {
        unsafe
        {
            Raw.Pem* pemRaw;
            pemRaw = pem.AsFFI();
            if (pemRaw == null)
            {
                throw new ObjectDisposedException("Pem");
            }
            IntPtr resultPtr = Raw.Pkcs7.FromPem(pemRaw);
            Raw.Pkcs7FfiResultBoxPkcs7BoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs7FfiResultBoxPkcs7BoxPickyError>(resultPtr);
            Raw.Pkcs7FfiResultBoxPkcs7BoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.Pkcs7* retVal = result.Ok;
            return new Pkcs7(retVal);
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>RsBuffer</c> allocated on Rust side.
    /// </returns>
    public RsBuffer ToDer()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            IntPtr resultPtr = Raw.Pkcs7.ToDer(_inner);
            Raw.Pkcs7FfiResultBoxRsBufferBoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs7FfiResultBoxRsBufferBoxPickyError>(resultPtr);
            Raw.Pkcs7FfiResultBoxRsBufferBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.RsBuffer* retVal = result.Ok;
            return new RsBuffer(retVal);
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Pem</c> allocated on Rust side.
    /// </returns>
    public Pem ToPem()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            IntPtr resultPtr = Raw.Pkcs7.ToPem(_inner);
            Raw.Pkcs7FfiResultBoxPemBoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs7FfiResultBoxPemBoxPickyError>(resultPtr);
            Raw.Pkcs7FfiResultBoxPemBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.Pem* retVal = result.Ok;
            return new Pem(retVal);
        }
    }

    /// <returns>
    /// A <c>AlgorithmIdentifierIterator</c> allocated on Rust side.
    /// </returns>
    public AlgorithmIdentifierIterator DigestAlgorithms()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            Raw.AlgorithmIdentifierIterator* retVal = Raw.Pkcs7.DigestAlgorithms(_inner);
            return new AlgorithmIdentifierIterator(retVal);
        }
    }

    /// <returns>
    /// A <c>SignerInfoIterator</c> allocated on Rust side.
    /// </returns>
    public SignerInfoIterator SignerInfos()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            Raw.SignerInfoIterator* retVal = Raw.Pkcs7.SignerInfos(_inner);
            return new SignerInfoIterator(retVal);
        }
    }

    /// <returns>
    /// A <c>EncapsulatedContentInfo</c> allocated on Rust side.
    /// </returns>
    public EncapsulatedContentInfo EncapsulatedContentInfo()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            Raw.EncapsulatedContentInfo* retVal = Raw.Pkcs7.EncapsulatedContentInfo(_inner);
            return new EncapsulatedContentInfo(retVal);
        }
    }

    /// <returns>
    /// A <c>CertIterator</c> allocated on Rust side.
    /// </returns>
    public CertIterator DecodeCertificates()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs7");
            }
            Raw.CertIterator* retVal = Raw.Pkcs7.DecodeCertificates(_inner);
            return new CertIterator(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Pkcs7* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Pkcs7.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Pkcs7()
    {
        Dispose();
    }
}
