// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class JwtValidator: IDisposable
{
    private unsafe Raw.JwtValidator* _inner;

    /// <summary>
    /// Creates a managed <c>JwtValidator</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe JwtValidator(Raw.JwtValidator* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Check signature and the registered exp and nbf claims. If a claim is missing token is rejected.
    /// </summary>
    /// <returns>
    /// A <c>JwtValidator</c> allocated on Rust side.
    /// </returns>
    public static JwtValidator Strict(long numericDate, ushort leeway)
    {
        unsafe
        {
            Raw.JwtValidator* retVal = Raw.JwtValidator.Strict(numericDate, leeway);
            return new JwtValidator(retVal);
        }
    }

    /// <summary>
    /// Check signature and the registered exp and nbf claims. Token isn't rejected if a claim is missing.
    /// </summary>
    /// <returns>
    /// A <c>JwtValidator</c> allocated on Rust side.
    /// </returns>
    public static JwtValidator Lenient(long numericDate, ushort leeway)
    {
        unsafe
        {
            Raw.JwtValidator* retVal = Raw.JwtValidator.Lenient(numericDate, leeway);
            return new JwtValidator(retVal);
        }
    }

    /// <summary>
    /// No check.
    /// </summary>
    /// <returns>
    /// A <c>JwtValidator</c> allocated on Rust side.
    /// </returns>
    public static JwtValidator NoCheck()
    {
        unsafe
        {
            Raw.JwtValidator* retVal = Raw.JwtValidator.NoCheck();
            return new JwtValidator(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.JwtValidator* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.JwtValidator.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~JwtValidator()
    {
        Dispose();
    }
}
