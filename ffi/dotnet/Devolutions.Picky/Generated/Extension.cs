// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class Extension: IDisposable
{
    private unsafe Raw.Extension* _inner;

    public bool Critical
    {
        get
        {
            return GetCritical();
        }
    }

    public string ExtnId
    {
        get
        {
            return GetExtnId();
        }
    }

    public ExtensionView Value
    {
        get
        {
            return GetValue();
        }
    }

    /// <summary>
    /// Creates a managed <c>Extension</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Extension(Raw.Extension* handle)
    {
        _inner = handle;
    }

    /// <exception cref="PickyException"></exception>
    public void GetExtnId(DiplomatWriteable writable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Extension");
            }
            Raw.X509ExtensionFfiResultVoidBoxPickyError result = Raw.Extension.GetExtnId(_inner, &writable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public string GetExtnId()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Extension");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.X509ExtensionFfiResultVoidBoxPickyError result = Raw.Extension.GetExtnId(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    public bool GetCritical()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Extension");
            }
            bool retVal = Raw.Extension.GetCritical(_inner);
            return retVal;
        }
    }

    /// <returns>
    /// A <c>ExtensionView</c> allocated on Rust side.
    /// </returns>
    public ExtensionView GetValue()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Extension");
            }
            Raw.ExtensionView* retVal = Raw.Extension.GetValue(_inner);
            return new ExtensionView(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Extension* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Extension.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Extension()
    {
        Dispose();
    }
}
