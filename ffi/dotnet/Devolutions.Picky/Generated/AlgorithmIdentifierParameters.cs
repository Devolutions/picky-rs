// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class AlgorithmIdentifierParameters: IDisposable
{
    private unsafe Raw.AlgorithmIdentifierParameters* _inner;

    public AlgorithmIdentifierParametersType Type
    {
        get
        {
            return GetType();
        }
    }

    /// <summary>
    /// Creates a managed <c>AlgorithmIdentifierParameters</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe AlgorithmIdentifierParameters(Raw.AlgorithmIdentifierParameters* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>AlgorithmIdentifierParametersType</c> allocated on C# side.
    /// </returns>
    public AlgorithmIdentifierParametersType GetType()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifierParameters");
            }
            Raw.AlgorithmIdentifierParametersType retVal = Raw.AlgorithmIdentifierParameters.GetType(_inner);
            return (AlgorithmIdentifierParametersType)retVal;
        }
    }

    /// <returns>
    /// A <c>AesParameters</c> allocated on Rust side.
    /// </returns>
    public AesParameters? ToAes()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifierParameters");
            }
            Raw.AesParameters* retVal = Raw.AlgorithmIdentifierParameters.ToAes(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new AesParameters(retVal);
        }
    }

    /// <returns>
    /// A <c>EcParameters</c> allocated on Rust side.
    /// </returns>
    public EcParameters? ToEc()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifierParameters");
            }
            Raw.EcParameters* retVal = Raw.AlgorithmIdentifierParameters.ToEc(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new EcParameters(retVal);
        }
    }

    /// <returns>
    /// A <c>RsassaPssParameters</c> allocated on Rust side.
    /// </returns>
    public RsassaPssParameters? ToRsassaPss()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifierParameters");
            }
            Raw.RsassaPssParameters* retVal = Raw.AlgorithmIdentifierParameters.ToRsassaPss(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new RsassaPssParameters(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.AlgorithmIdentifierParameters* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.AlgorithmIdentifierParameters.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~AlgorithmIdentifierParameters()
    {
        Dispose();
    }
}
