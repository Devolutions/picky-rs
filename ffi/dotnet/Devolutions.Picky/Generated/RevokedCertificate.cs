// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class RevokedCertificate: IDisposable
{
    private unsafe Raw.RevokedCertificate* _inner;

    public ExtensionIterator? Extensions
    {
        get
        {
            return GetExtensions();
        }
    }

    public Time RevocationDate
    {
        get
        {
            return GetRevocationDate();
        }
    }

    public Buffer UserCertificate
    {
        get
        {
            return GetUserCertificate();
        }
    }

    /// <summary>
    /// Creates a managed <c>RevokedCertificate</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RevokedCertificate(Raw.RevokedCertificate* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>Buffer</c> allocated on Rust side.
    /// </returns>
    public Buffer GetUserCertificate()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RevokedCertificate");
            }
            Raw.Buffer* retVal = Raw.RevokedCertificate.GetUserCertificate(_inner);
            return new Buffer(retVal);
        }
    }

    /// <returns>
    /// A <c>Time</c> allocated on Rust side.
    /// </returns>
    public Time GetRevocationDate()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RevokedCertificate");
            }
            Raw.Time* retVal = Raw.RevokedCertificate.GetRevocationDate(_inner);
            return new Time(retVal);
        }
    }

    /// <returns>
    /// A <c>ExtensionIterator</c> allocated on Rust side.
    /// </returns>
    public ExtensionIterator? GetExtensions()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RevokedCertificate");
            }
            Raw.ExtensionIterator* retVal = Raw.RevokedCertificate.GetExtensions(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new ExtensionIterator(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RevokedCertificate* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RevokedCertificate.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RevokedCertificate()
    {
        Dispose();
    }
}
