// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class SpcString: IDisposable
{
    private unsafe Raw.SpcString* _inner;

    public VecU8 AsBytes
    {
        get
        {
            return GetAsBytes();
        }
    }

    public string AsString
    {
        get
        {
            return GetAsString();
        }
    }

    public SpcStringType Type
    {
        get
        {
            return GetType();
        }
    }

    /// <summary>
    /// Creates a managed <c>SpcString</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe SpcString(Raw.SpcString* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>SpcStringType</c> allocated on C# side.
    /// </returns>
    public SpcStringType GetType()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("SpcString");
            }
            Raw.SpcStringType retVal = Raw.SpcString.GetType(_inner);
            return (SpcStringType)retVal;
        }
    }

    /// <exception cref="PickyException"></exception>
    public void GetAsString(DiplomatWriteable writable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("SpcString");
            }
            IntPtr resultPtr = Raw.SpcString.GetAsString(_inner, &writable);
            Raw.X509AttributeFfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.X509AttributeFfiResultVoidBoxPickyError>(resultPtr);
            Raw.X509AttributeFfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public string GetAsString()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("SpcString");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            IntPtr resultPtr = Raw.SpcString.GetAsString(_inner, &writeable);
            Raw.X509AttributeFfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.X509AttributeFfiResultVoidBoxPickyError>(resultPtr);
            Raw.X509AttributeFfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 GetAsBytes()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("SpcString");
            }
            Raw.VecU8* retVal = Raw.SpcString.GetAsBytes(_inner);
            return new VecU8(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.SpcString* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.SpcString.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~SpcString()
    {
        Dispose();
    }
}
