// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky.Raw;

#nullable enable

[StructLayout(LayoutKind.Sequential)]
public partial struct JwtValidator
{
#if __IOS__
    private const string NativeLib = "libDevolutionsPicky.framework/libDevolutionsPicky";
#else
    private const string NativeLib = "DevolutionsPicky";
#endif

    /// <summary>
    /// Check signature and the registered exp and nbf claims. If a claim is missing token is rejected.
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "JwtValidator_strict", ExactSpelling = true)]
    public static unsafe extern JwtValidator* Strict(long numericDate, ushort leeway);

    /// <summary>
    /// Check signature and the registered exp and nbf claims. Token isn't rejected if a claim is missing.
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "JwtValidator_lenient", ExactSpelling = true)]
    public static unsafe extern JwtValidator* Lenient(long numericDate, ushort leeway);

    /// <summary>
    /// No check.
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "JwtValidator_no_check", ExactSpelling = true)]
    public static unsafe extern JwtValidator* NoCheck();

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "JwtValidator_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(JwtValidator* self);
}
