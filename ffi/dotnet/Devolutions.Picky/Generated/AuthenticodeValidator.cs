// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class AuthenticodeValidator: IDisposable
{
    private unsafe Raw.AuthenticodeValidator* _inner;

    /// <summary>
    /// Creates a managed <c>AuthenticodeValidator</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe AuthenticodeValidator(Raw.AuthenticodeValidator* handle)
    {
        _inner = handle;
    }

    public void ExactDate(UtcDate exact)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.UtcDate* exactRaw;
            exactRaw = exact.AsFFI();
            if (exactRaw == null)
            {
                throw new ObjectDisposedException("UtcDate");
            }
            Raw.AuthenticodeValidator.ExactDate(_inner, exactRaw);
        }
    }

    public void IntervalDate(UtcDate lower, UtcDate upper)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.UtcDate* lowerRaw;
            lowerRaw = lower.AsFFI();
            if (lowerRaw == null)
            {
                throw new ObjectDisposedException("UtcDate");
            }
            Raw.UtcDate* upperRaw;
            upperRaw = upper.AsFFI();
            if (upperRaw == null)
            {
                throw new ObjectDisposedException("UtcDate");
            }
            Raw.AuthenticodeValidator.IntervalDate(_inner, lowerRaw, upperRaw);
        }
    }

    public void RequireNotBeforeCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.RequireNotBeforeCheck(_inner);
        }
    }

    public void RequireNotAfterCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.RequireNotAfterCheck(_inner);
        }
    }

    public void IgnoreNotBeforeCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.IgnoreNotBeforeCheck(_inner);
        }
    }

    public void IgnoreNotAfterCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.IgnoreNotAfterCheck(_inner);
        }
    }

    public void RequireSigningCertificateCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.RequireSigningCertificateCheck(_inner);
        }
    }

    public void IgnoreSigningCertificateCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.IgnoreSigningCertificateCheck(_inner);
        }
    }

    public void RequireBasicAuthenticodeValidation(VecU8 expectedFileHash)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.VecU8* expectedFileHashRaw;
            expectedFileHashRaw = expectedFileHash.AsFFI();
            if (expectedFileHashRaw == null)
            {
                throw new ObjectDisposedException("VecU8");
            }
            Raw.AuthenticodeValidator.RequireBasicAuthenticodeValidation(_inner, expectedFileHashRaw);
        }
    }

    public void IgnoreBasicAuthenticodeValidation()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.IgnoreBasicAuthenticodeValidation(_inner);
        }
    }

    public void RequireChainCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.RequireChainCheck(_inner);
        }
    }

    public void IgnoreChainCheck()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.AuthenticodeValidator.IgnoreChainCheck(_inner);
        }
    }

    public void ExcludeCertAuthorities(DirectoryNameIterator certAuths)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            Raw.DirectoryNameIterator* certAuthsRaw;
            certAuthsRaw = certAuths.AsFFI();
            if (certAuthsRaw == null)
            {
                throw new ObjectDisposedException("DirectoryNameIterator");
            }
            Raw.AuthenticodeValidator.ExcludeCertAuthorities(_inner, certAuthsRaw);
        }
    }

    /// <exception cref="PickyException"></exception>
    public void Verify()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AuthenticodeValidator");
            }
            IntPtr resultPtr = Raw.AuthenticodeValidator.Verify(_inner);
            Raw.X509AuthenticodeFfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.X509AuthenticodeFfiResultVoidBoxPickyError>(resultPtr);
            Raw.X509AuthenticodeFfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.AuthenticodeValidator* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.AuthenticodeValidator.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~AuthenticodeValidator()
    {
        Dispose();
    }
}
