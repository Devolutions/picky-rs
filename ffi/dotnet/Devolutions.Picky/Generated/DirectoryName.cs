// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class DirectoryName: IDisposable
{
    private unsafe Raw.DirectoryName* _inner;

    /// <summary>
    /// Creates a managed <c>DirectoryName</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe DirectoryName(Raw.DirectoryName* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>DirectoryName</c> allocated on Rust side.
    /// </returns>
    public static DirectoryName New()
    {
        unsafe
        {
            Raw.DirectoryName* retVal = Raw.DirectoryName.New();
            return new DirectoryName(retVal);
        }
    }

    /// <returns>
    /// A <c>DirectoryName</c> allocated on Rust side.
    /// </returns>
    public static DirectoryName NewCommonName(string name)
    {
        unsafe
        {
            byte[] nameBuf = DiplomatUtils.StringToUtf8(name);
            nuint nameBufLength = (nuint)nameBuf.Length;
            fixed (byte* nameBufPtr = nameBuf)
            {
                Raw.DirectoryName* retVal = Raw.DirectoryName.NewCommonName(nameBufPtr, nameBufLength);
                return new DirectoryName(retVal);
            }
        }
    }

    /// <returns>
    /// A <c>DirectoryString</c> allocated on Rust side.
    /// </returns>
    public DirectoryString? FindCommonName()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("DirectoryName");
            }
            Raw.DirectoryString* retVal = Raw.DirectoryName.FindCommonName(_inner);
            if (retVal == null)
            {
                return null;
            }
            return new DirectoryString(retVal);
        }
    }

    public void AddAttr(NameAttr attr, string value)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("DirectoryName");
            }
            byte[] valueBuf = DiplomatUtils.StringToUtf8(value);
            nuint valueBufLength = (nuint)valueBuf.Length;
            Raw.NameAttr attrRaw;
            attrRaw = (Raw.NameAttr)attr;
            fixed (byte* valueBufPtr = valueBuf)
            {
                Raw.DirectoryName.AddAttr(_inner, attrRaw, valueBufPtr, valueBufLength);
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public void AddEmail(string email)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("DirectoryName");
            }
            byte[] emailBuf = DiplomatUtils.StringToUtf8(email);
            nuint emailBufLength = (nuint)emailBuf.Length;
            fixed (byte* emailBufPtr = emailBuf)
            {
                IntPtr resultPtr = Raw.DirectoryName.AddEmail(_inner, emailBufPtr, emailBufLength);
                Raw.X509NameFfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.X509NameFfiResultVoidBoxPickyError>(resultPtr);
                Raw.X509NameFfiResultVoidBoxPickyError.Destroy(resultPtr);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.DirectoryName* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.DirectoryName.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~DirectoryName()
    {
        Dispose();
    }
}
