// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// PPK encryption configuration.
/// </summary>
/// <remarks>
/// Could be either constructed via `PuttyPpkEncryptionConfig::default()` or `PuttyPpkEncryptionConfig::builder()`
/// <br/>
/// Defaults are the same as in PuTTY.
/// </remarks>
public partial class PuttyPpkEncryptionConfig: IDisposable
{
    private unsafe Raw.PuttyPpkEncryptionConfig* _inner;

    /// <summary>
    /// Creates a managed <c>PuttyPpkEncryptionConfig</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PuttyPpkEncryptionConfig(Raw.PuttyPpkEncryptionConfig* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>PuttyPpkEncryptionConfig</c> allocated on Rust side.
    /// </returns>
    public static PuttyPpkEncryptionConfig Default()
    {
        unsafe
        {
            Raw.PuttyPpkEncryptionConfig* retVal = Raw.PuttyPpkEncryptionConfig.Default();
            return new PuttyPpkEncryptionConfig(retVal);
        }
    }

    /// <returns>
    /// A <c>PuttyPpkEncryptionConfigBuilder</c> allocated on Rust side.
    /// </returns>
    public static PuttyPpkEncryptionConfigBuilder Builder()
    {
        unsafe
        {
            Raw.PuttyPpkEncryptionConfigBuilder* retVal = Raw.PuttyPpkEncryptionConfig.Builder();
            return new PuttyPpkEncryptionConfigBuilder(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PuttyPpkEncryptionConfig* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PuttyPpkEncryptionConfig.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PuttyPpkEncryptionConfig()
    {
        Dispose();
    }
}
