// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// PPK encryption configuration builder.
/// </summary>
/// <remarks>
/// Could be constructed via `PuttyPpkEncryptionConfig::builder()`.
/// </remarks>
public partial class PuttyPpkEncryptionConfigBuilder: IDisposable
{
    private unsafe Raw.PuttyPpkEncryptionConfigBuilder* _inner;

    public uint Argon2Memory
    {
        set
        {
            SetArgon2Memory(value);
        }
    }

    public uint Argon2Parallelism
    {
        set
        {
            SetArgon2Parallelism(value);
        }
    }

    public uint Argon2Passes
    {
        set
        {
            SetArgon2Passes(value);
        }
    }

    public uint Argon2SaltSize
    {
        set
        {
            SetArgon2SaltSize(value);
        }
    }

    /// <summary>
    /// Creates a managed <c>PuttyPpkEncryptionConfigBuilder</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PuttyPpkEncryptionConfigBuilder(Raw.PuttyPpkEncryptionConfigBuilder* handle)
    {
        _inner = handle;
    }

    public void GetArgon2Flavour(PuttyArgon2Flavour argon2Flavour)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPpkEncryptionConfigBuilder");
            }
            Raw.PuttyArgon2Flavour argon2FlavourRaw;
            argon2FlavourRaw = (Raw.PuttyArgon2Flavour)argon2Flavour;
            Raw.PuttyPpkEncryptionConfigBuilder.GetArgon2Flavour(_inner, argon2FlavourRaw);
        }
    }

    public void SetArgon2Memory(uint argon2Memory)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPpkEncryptionConfigBuilder");
            }
            Raw.PuttyPpkEncryptionConfigBuilder.SetArgon2Memory(_inner, argon2Memory);
        }
    }

    public void SetArgon2Passes(uint argon2Passes)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPpkEncryptionConfigBuilder");
            }
            Raw.PuttyPpkEncryptionConfigBuilder.SetArgon2Passes(_inner, argon2Passes);
        }
    }

    public void SetArgon2Parallelism(uint argon2Parallelism)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPpkEncryptionConfigBuilder");
            }
            Raw.PuttyPpkEncryptionConfigBuilder.SetArgon2Parallelism(_inner, argon2Parallelism);
        }
    }

    public void SetArgon2SaltSize(uint argon2SaltSize)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPpkEncryptionConfigBuilder");
            }
            Raw.PuttyPpkEncryptionConfigBuilder.SetArgon2SaltSize(_inner, argon2SaltSize);
        }
    }

    /// <returns>
    /// A <c>PuttyPpkEncryptionConfig</c> allocated on Rust side.
    /// </returns>
    public PuttyPpkEncryptionConfig Build()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPpkEncryptionConfigBuilder");
            }
            Raw.PuttyPpkEncryptionConfig* retVal = Raw.PuttyPpkEncryptionConfigBuilder.Build(_inner);
            return new PuttyPpkEncryptionConfig(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PuttyPpkEncryptionConfigBuilder* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PuttyPpkEncryptionConfigBuilder.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PuttyPpkEncryptionConfigBuilder()
    {
        Dispose();
    }
}
