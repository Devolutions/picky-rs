// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// PuTTY public key format.
/// </summary>
/// <remarks>
/// ### Functionality:
/// - Conversion to/from OpenSSH format.
/// - Encoding/decoding to/from string.
/// - Could be extracted from `PuttyPpk` private keys.
/// <br/>
/// ### Notes
/// - Although top-level containeris similar to PEM, it is not compatible with it because of
/// additional comment field after the header.
/// </remarks>
public partial class PuttyPublicKey: IDisposable
{
    private unsafe Raw.PuttyPublicKey* _inner;

    /// <summary>
    /// Creates a managed <c>PuttyPublicKey</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PuttyPublicKey(Raw.PuttyPublicKey* handle)
    {
        _inner = handle;
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PuttyPublicKey</c> allocated on Rust side.
    /// </returns>
    public static PuttyPublicKey FromOpenssh(SshPublicKey key)
    {
        unsafe
        {
            Raw.SshPublicKey* keyRaw;
            keyRaw = key.AsFFI();
            if (keyRaw == null)
            {
                throw new ObjectDisposedException("SshPublicKey");
            }
            IntPtr resultPtr = Raw.PuttyPublicKey.FromOpenssh(keyRaw);
            Raw.PuttyFfiResultBoxPuttyPublicKeyBoxPickyError result = Marshal.PtrToStructure<Raw.PuttyFfiResultBoxPuttyPublicKeyBoxPickyError>(resultPtr);
            Raw.PuttyFfiResultBoxPuttyPublicKeyBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.PuttyPublicKey* retVal = result.Ok;
            return new PuttyPublicKey(retVal);
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>SshPublicKey</c> allocated on Rust side.
    /// </returns>
    public SshPublicKey ToOpenssh()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPublicKey");
            }
            IntPtr resultPtr = Raw.PuttyPublicKey.ToOpenssh(_inner);
            Raw.PuttyFfiResultBoxSshPublicKeyBoxPickyError result = Marshal.PtrToStructure<Raw.PuttyFfiResultBoxSshPublicKeyBoxPickyError>(resultPtr);
            Raw.PuttyFfiResultBoxSshPublicKeyBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.SshPublicKey* retVal = result.Ok;
            return new SshPublicKey(retVal);
        }
    }

    /// <exception cref="PickyException"></exception>
    public void Comment(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPublicKey");
            }
            IntPtr resultPtr = Raw.PuttyPublicKey.Comment(_inner, &writeable);
            Raw.PuttyFfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.PuttyFfiResultVoidBoxPickyError>(resultPtr);
            Raw.PuttyFfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public string Comment()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPublicKey");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            IntPtr resultPtr = Raw.PuttyPublicKey.Comment(_inner, &writeable);
            Raw.PuttyFfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.PuttyFfiResultVoidBoxPickyError>(resultPtr);
            Raw.PuttyFfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PublicKey</c> allocated on Rust side.
    /// </returns>
    public PublicKey ToInnerKey()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PuttyPublicKey");
            }
            IntPtr resultPtr = Raw.PuttyPublicKey.ToInnerKey(_inner);
            Raw.PuttyFfiResultBoxPublicKeyBoxPickyError result = Marshal.PtrToStructure<Raw.PuttyFfiResultBoxPublicKeyBoxPickyError>(resultPtr);
            Raw.PuttyFfiResultBoxPublicKeyBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.PublicKey* retVal = result.Ok;
            return new PublicKey(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PuttyPublicKey* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PuttyPublicKey.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PuttyPublicKey()
    {
        Dispose();
    }
}
