// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class PublicKey: IDisposable
{
    private unsafe Raw.PublicKey* _inner;

    public KeyKind Kind
    {
        get
        {
            return GetKind();
        }
    }

    /// <summary>
    /// Creates a managed <c>PublicKey</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PublicKey(Raw.PublicKey* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Extracts public key from PEM object.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PublicKey</c> allocated on Rust side.
    /// </returns>
    public static PublicKey FromPem(Pem pem)
    {
        unsafe
        {
            Raw.Pem* pemRaw;
            pemRaw = pem.AsFFI();
            if (pemRaw == null)
            {
                throw new ObjectDisposedException("Pem");
            }
            Raw.KeyFfiResultBoxPublicKeyBoxPickyError result = Raw.PublicKey.FromPem(pemRaw);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.PublicKey* retVal = result.Ok;
            return new PublicKey(retVal);
        }
    }

    /// <summary>
    /// Reads a public key from its DER encoding (i.e.: SubjectPublicKeyInfo structure).
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PublicKey</c> allocated on Rust side.
    /// </returns>
    public static PublicKey FromDer(byte[] der)
    {
        unsafe
        {
            nuint derLength = (nuint)der.Length;
            fixed (byte* derPtr = der)
            {
                Raw.KeyFfiResultBoxPublicKeyBoxPickyError result = Raw.PublicKey.FromDer(derPtr, derLength);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.PublicKey* retVal = result.Ok;
                return new PublicKey(retVal);
            }
        }
    }

    /// <summary>
    /// Reads a RSA public key from its DER encoding (i.e.: PKCS1).
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>PublicKey</c> allocated on Rust side.
    /// </returns>
    public static PublicKey FromPkcs1(byte[] der)
    {
        unsafe
        {
            nuint derLength = (nuint)der.Length;
            fixed (byte* derPtr = der)
            {
                Raw.KeyFfiResultBoxPublicKeyBoxPickyError result = Raw.PublicKey.FromPkcs1(derPtr, derLength);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.PublicKey* retVal = result.Ok;
                return new PublicKey(retVal);
            }
        }
    }

    /// <summary>
    /// Exports the public key into a PEM object.
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Pem</c> allocated on Rust side.
    /// </returns>
    public Pem ToPem()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PublicKey");
            }
            Raw.KeyFfiResultBoxPemBoxPickyError result = Raw.PublicKey.ToPem(_inner);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.Pem* retVal = result.Ok;
            return new Pem(retVal);
        }
    }

    /// <summary>
    /// Retrieves the key kind for this public key.
    /// </summary>
    /// <returns>
    /// A <c>KeyKind</c> allocated on C# side.
    /// </returns>
    public KeyKind GetKind()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PublicKey");
            }
            Raw.KeyKind retVal = Raw.PublicKey.GetKind(_inner);
            return (KeyKind)retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PublicKey* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PublicKey.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PublicKey()
    {
        Dispose();
    }
}
