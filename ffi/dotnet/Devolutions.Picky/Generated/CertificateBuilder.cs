// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class CertificateBuilder: IDisposable
{
    private unsafe Raw.CertificateBuilder* _inner;

    public string IssuerCommonName
    {
        set
        {
            SetIssuerCommonName(value);
        }
    }

    public PrivateKey IssuerKey
    {
        set
        {
            SetIssuerKey(value);
        }
    }

    public bool KpServerAuth
    {
        set
        {
            SetKpServerAuth(value);
        }
    }

    public bool KuDigitalSignature
    {
        set
        {
            SetKuDigitalSignature(value);
        }
    }

    public bool SelfSigned
    {
        set
        {
            SetSelfSigned(value);
        }
    }

    public string SubjectDnsName
    {
        set
        {
            SetSubjectDnsName(value);
        }
    }

    public UtcDate ValidFrom
    {
        set
        {
            SetValidFrom(value);
        }
    }

    public UtcDate ValidTo
    {
        set
        {
            SetValidTo(value);
        }
    }

    /// <summary>
    /// Creates a managed <c>CertificateBuilder</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe CertificateBuilder(Raw.CertificateBuilder* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>CertificateBuilder</c> allocated on Rust side.
    /// </returns>
    public static CertificateBuilder New()
    {
        unsafe
        {
            Raw.CertificateBuilder* retVal = Raw.CertificateBuilder.New();
            return new CertificateBuilder(retVal);
        }
    }

    public void SetValidFrom(UtcDate validFrom)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.UtcDate* validFromRaw;
            validFromRaw = validFrom.AsFFI();
            if (validFromRaw == null)
            {
                throw new ObjectDisposedException("UtcDate");
            }
            Raw.CertificateBuilder.SetValidFrom(_inner, validFromRaw);
        }
    }

    public void SetValidTo(UtcDate validTo)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.UtcDate* validToRaw;
            validToRaw = validTo.AsFFI();
            if (validToRaw == null)
            {
                throw new ObjectDisposedException("UtcDate");
            }
            Raw.CertificateBuilder.SetValidTo(_inner, validToRaw);
        }
    }

    public void SetIssuerCommonName(string name)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            byte[] nameBuf = DiplomatUtils.StringToUtf8(name);
            nuint nameBufLength = (nuint)nameBuf.Length;
            fixed (byte* nameBufPtr = nameBuf)
            {
                Raw.CertificateBuilder.SetIssuerCommonName(_inner, nameBufPtr, nameBufLength);
            }
        }
    }

    public void SetSubjectDnsName(string name)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            byte[] nameBuf = DiplomatUtils.StringToUtf8(name);
            nuint nameBufLength = (nuint)nameBuf.Length;
            fixed (byte* nameBufPtr = nameBuf)
            {
                Raw.CertificateBuilder.SetSubjectDnsName(_inner, nameBufPtr, nameBufLength);
            }
        }
    }

    public void SetIssuerKey(PrivateKey key)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.PrivateKey* keyRaw;
            keyRaw = key.AsFFI();
            if (keyRaw == null)
            {
                throw new ObjectDisposedException("PrivateKey");
            }
            Raw.CertificateBuilder.SetIssuerKey(_inner, keyRaw);
        }
    }

    public void SetSelfSigned(bool isSelfSigned)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.CertificateBuilder.SetSelfSigned(_inner, isSelfSigned);
        }
    }

    public void SetKuDigitalSignature(bool enable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.CertificateBuilder.SetKuDigitalSignature(_inner, enable);
        }
    }

    public void SetKpServerAuth(bool enable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.CertificateBuilder.SetKpServerAuth(_inner, enable);
        }
    }

    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Cert</c> allocated on Rust side.
    /// </returns>
    public Cert Build()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("CertificateBuilder");
            }
            Raw.X509FfiResultBoxCertBoxPickyError result = Raw.CertificateBuilder.Build(_inner);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            Raw.Cert* retVal = result.Ok;
            return new Cert(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.CertificateBuilder* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.CertificateBuilder.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~CertificateBuilder()
    {
        Dispose();
    }
}
