// Automatically generated by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// Stringified Picky error.
/// </summary>
public partial class PickyError: IDisposable
{
    private unsafe Raw.PickyError* _inner;

    /// <summary>
    /// Creates a managed <c>PickyError</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// </remarks>
    /// <remarks>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe PickyError(Raw.PickyError* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Returns the error as a string.
    /// </summary>
    public void ToDisplay(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyError");
            }
            Raw.PickyError.ToDisplay(_inner, &writeable);
        }
    }

    /// <summary>
    /// Returns the error as a string.
    /// </summary>
    public string ToDisplay()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyError");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.PickyError.ToDisplay(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Prints the error string.
    /// </summary>
    public void Print()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("PickyError");
            }
            Raw.PickyError.Print(_inner);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.PickyError* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.PickyError.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~PickyError()
    {
        Dispose();
    }
}
