// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// Encryption mode to use for the PFX file
/// </summary>
public partial class Pkcs12Encryption: IDisposable
{
    private unsafe Raw.Pkcs12Encryption* _inner;

    /// <summary>
    /// Creates a managed <c>Pkcs12Encryption</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Pkcs12Encryption(Raw.Pkcs12Encryption* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>Pkcs12Encryption</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12Encryption Default()
    {
        unsafe
        {
            Raw.Pkcs12Encryption* retVal = Raw.Pkcs12Encryption.Default();
            return new Pkcs12Encryption(retVal);
        }
    }

    /// <returns>
    /// A <c>Pkcs12Encryption</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12Encryption NewPbes2(Pbes2Cipher cipher, Pkcs12HashAlgorithm hmacKdf)
    {
        unsafe
        {
            Raw.Pbes2Cipher cipherRaw;
            cipherRaw = (Raw.Pbes2Cipher)cipher;
            Raw.Pkcs12HashAlgorithm hmacKdfRaw;
            hmacKdfRaw = (Raw.Pkcs12HashAlgorithm)hmacKdf;
            Raw.Pkcs12Encryption* retVal = Raw.Pkcs12Encryption.NewPbes2(cipherRaw, hmacKdfRaw);
            return new Pkcs12Encryption(retVal);
        }
    }

    /// <returns>
    /// A <c>Pkcs12Encryption</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12Encryption NewPbes1(Pbes1Cipher cipher)
    {
        unsafe
        {
            Raw.Pbes1Cipher cipherRaw;
            cipherRaw = (Raw.Pbes1Cipher)cipher;
            Raw.Pkcs12Encryption* retVal = Raw.Pkcs12Encryption.NewPbes1(cipherRaw);
            return new Pkcs12Encryption(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Pkcs12Encryption* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Pkcs12Encryption.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Pkcs12Encryption()
    {
        Dispose();
    }
}
