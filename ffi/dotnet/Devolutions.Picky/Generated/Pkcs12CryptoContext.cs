// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// Crypto context to use when building a PFX.
/// </summary>
public partial class Pkcs12CryptoContext: IDisposable
{
    private unsafe Raw.Pkcs12CryptoContext* _inner;

    /// <summary>
    /// Creates a managed <c>Pkcs12CryptoContext</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Pkcs12CryptoContext(Raw.Pkcs12CryptoContext* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>Pkcs12CryptoContext</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12CryptoContext WithPassword(string password)
    {
        unsafe
        {
            byte[] passwordBuf = DiplomatUtils.StringToUtf8(password);
            nuint passwordBufLength = (nuint)passwordBuf.Length;
            fixed (byte* passwordBufPtr = passwordBuf)
            {
                Raw.Pkcs12CryptoContext* retVal = Raw.Pkcs12CryptoContext.WithPassword(passwordBufPtr, passwordBufLength);
                return new Pkcs12CryptoContext(retVal);
            }
        }
    }

    /// <returns>
    /// A <c>Pkcs12CryptoContext</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12CryptoContext NoPassword()
    {
        unsafe
        {
            Raw.Pkcs12CryptoContext* retVal = Raw.Pkcs12CryptoContext.NoPassword();
            return new Pkcs12CryptoContext(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Pkcs12CryptoContext* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Pkcs12CryptoContext.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Pkcs12CryptoContext()
    {
        Dispose();
    }
}
