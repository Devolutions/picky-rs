// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky.Raw;

#nullable enable

[StructLayout(LayoutKind.Sequential)]
public partial struct CertificateBuilder
{
#if __IOS__
    private const string NativeLib = "libDevolutionsPicky.framework/libDevolutionsPicky";
#else
    private const string NativeLib = "DevolutionsPicky";
#endif

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_new", ExactSpelling = true)]
    public static unsafe extern CertificateBuilder* New();

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_valid_from", ExactSpelling = true)]
    public static unsafe extern void SetValidFrom(CertificateBuilder* self, UtcDate* validFrom);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_valid_to", ExactSpelling = true)]
    public static unsafe extern void SetValidTo(CertificateBuilder* self, UtcDate* validTo);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_issuer_common_name", ExactSpelling = true)]
    public static unsafe extern void SetIssuerCommonName(CertificateBuilder* self, byte* name, nuint nameSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_subject_dns_name", ExactSpelling = true)]
    public static unsafe extern void SetSubjectDnsName(CertificateBuilder* self, byte* name, nuint nameSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_issuer_key", ExactSpelling = true)]
    public static unsafe extern void SetIssuerKey(CertificateBuilder* self, PrivateKey* key);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_self_signed", ExactSpelling = true)]
    public static unsafe extern void SetSelfSigned(CertificateBuilder* self, [MarshalAs(UnmanagedType.U1)] bool isSelfSigned);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_ku_digital_signature", ExactSpelling = true)]
    public static unsafe extern void SetKuDigitalSignature(CertificateBuilder* self, [MarshalAs(UnmanagedType.U1)] bool enable);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_set_kp_server_auth", ExactSpelling = true)]
    public static unsafe extern void SetKpServerAuth(CertificateBuilder* self, [MarshalAs(UnmanagedType.U1)] bool enable);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_build", ExactSpelling = true)]
    public static unsafe extern IntPtr Build(CertificateBuilder* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CertificateBuilder_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(CertificateBuilder* self);
}
