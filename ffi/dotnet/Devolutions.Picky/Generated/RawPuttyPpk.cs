// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky.Raw;

#nullable enable

/// <summary>
/// PuTTY Private Key (PPK) format.
/// </summary>
/// <remarks>
/// ### Functionality
/// - Generation of new keys.
/// - Conversion to/from OpenSSH format.
/// - Encoding/decoding to/from string.
/// - Version upgrade/downgrade.
/// <br/>
/// ### Usage notes
/// - Ppk structure is immutable. All operations that modify the key return a new instance.
/// - When input file is encrypted, all operations with the private key will be unavailable until
/// ppk is decrypted via `PuttyPpk::decrypt`.
/// - Newly generated keys are always unencrypted. They should be encrypted via `PuttyPpk::encrypt`
/// when required
/// </remarks>
[StructLayout(LayoutKind.Sequential)]
public partial struct PuttyPpk
{
#if __IOS__
    private const string NativeLib = "libDevolutionsPicky.framework/libDevolutionsPicky";
#else
    private const string NativeLib = "DevolutionsPicky";
#endif

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_generate_rsa", ExactSpelling = true)]
    public static unsafe extern IntPtr GenerateRsa(nuint bits, byte* comment, nuint commentSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_generate_ec", ExactSpelling = true)]
    public static unsafe extern IntPtr GenerateEc(EcCurve curve, byte* comment, nuint commentSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_generate_ed25519", ExactSpelling = true)]
    public static unsafe extern IntPtr GenerateEd25519(byte* comment, nuint commentSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_to_string", ExactSpelling = true)]
    public static unsafe extern IntPtr ToString(PuttyPpk* self, DiplomatWriteable* writeable);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_parse", ExactSpelling = true)]
    public static unsafe extern IntPtr Parse(byte* ppk, nuint ppkSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_from_openssh_private_key", ExactSpelling = true)]
    public static unsafe extern IntPtr FromOpensshPrivateKey(SshPrivateKey* key);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_to_openssh_private_key", ExactSpelling = true)]
    public static unsafe extern IntPtr ToOpensshPrivateKey(PuttyPpk* self, byte* passphrase, nuint passphraseSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_public_key", ExactSpelling = true)]
    public static unsafe extern IntPtr PublicKey(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_private_key", ExactSpelling = true)]
    public static unsafe extern IntPtr PrivateKey(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_extract_putty_public_key", ExactSpelling = true)]
    public static unsafe extern IntPtr ExtractPuttyPublicKey(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_version", ExactSpelling = true)]
    public static unsafe extern PuttyPpkVersion Version(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_algorithm", ExactSpelling = true)]
    public static unsafe extern PuttyPpkKeyAlgorithm Algorithm(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_comment", ExactSpelling = true)]
    public static unsafe extern IntPtr Comment(PuttyPpk* self, DiplomatWriteable* writeable);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_to_version", ExactSpelling = true)]
    public static unsafe extern IntPtr ToVersion(PuttyPpk* self, PuttyPpkVersion version);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_is_encrypted", ExactSpelling = true)]
    [return: MarshalAs(UnmanagedType.U1)]
    public static unsafe extern bool IsEncrypted(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_argon2_params", ExactSpelling = true)]
    public static unsafe extern PuttyArgon2Params* Argon2Params(PuttyPpk* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_decrypt", ExactSpelling = true)]
    public static unsafe extern IntPtr Decrypt(PuttyPpk* self, byte* passphrase, nuint passphraseSz);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_encrypt", ExactSpelling = true)]
    public static unsafe extern IntPtr Encrypt(PuttyPpk* self, byte* passphrase, nuint passphraseSz, PuttyPpkEncryptionConfig* config);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "PuttyPpk_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(PuttyPpk* self);
}
