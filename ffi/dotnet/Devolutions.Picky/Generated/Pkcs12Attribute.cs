// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

/// <summary>
/// Attributes which can be used to store additional information about safe (e.g. friendly name, key ID).
/// </summary>
public partial class Pkcs12Attribute: IDisposable
{
    private unsafe Raw.Pkcs12Attribute* _inner;

    public string FriendlyName
    {
        get
        {
            return GetFriendlyName();
        }
    }

    public Pkcs12AttributeKind Kind
    {
        get
        {
            return GetKind();
        }
    }

    /// <summary>
    /// Creates a managed <c>Pkcs12Attribute</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Pkcs12Attribute(Raw.Pkcs12Attribute* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Creates a new `friendly name` attribute. This attribute is used to store a human-readable
    /// name of the safe bag contents (e.g. certificate name).
    /// </summary>
    /// <exception cref="PickyException"></exception>
    /// <returns>
    /// A <c>Pkcs12Attribute</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12Attribute NewFriendlyName(string name)
    {
        unsafe
        {
            byte[] nameBuf = DiplomatUtils.StringToUtf8(name);
            nuint nameBufLength = (nuint)nameBuf.Length;
            fixed (byte* nameBufPtr = nameBuf)
            {
                IntPtr resultPtr = Raw.Pkcs12Attribute.NewFriendlyName(nameBufPtr, nameBufLength);
                Raw.Pkcs12FfiResultBoxPkcs12AttributeBoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs12FfiResultBoxPkcs12AttributeBoxPickyError>(resultPtr);
                Raw.Pkcs12FfiResultBoxPkcs12AttributeBoxPickyError.Destroy(resultPtr);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                Raw.Pkcs12Attribute* retVal = result.Ok;
                return new Pkcs12Attribute(retVal);
            }
        }
    }

    /// <summary>
    /// Creates a new `local key id` attribute. This attribute is used to indicate relation between
    /// private key and certificate (when set to same value on both objects).
    /// </summary>
    /// <returns>
    /// A <c>Pkcs12Attribute</c> allocated on Rust side.
    /// </returns>
    public static Pkcs12Attribute NewLocalKeyId(byte[] value)
    {
        unsafe
        {
            nuint valueLength = (nuint)value.Length;
            fixed (byte* valuePtr = value)
            {
                Raw.Pkcs12Attribute* retVal = Raw.Pkcs12Attribute.NewLocalKeyId(valuePtr, valueLength);
                return new Pkcs12Attribute(retVal);
            }
        }
    }

    /// <returns>
    /// A <c>Pkcs12AttributeKind</c> allocated on C# side.
    /// </returns>
    public Pkcs12AttributeKind GetKind()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs12Attribute");
            }
            Raw.Pkcs12AttributeKind retVal = Raw.Pkcs12Attribute.GetKind(_inner);
            return (Pkcs12AttributeKind)retVal;
        }
    }

    /// <exception cref="PickyException"></exception>
    public void GetFriendlyName(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs12Attribute");
            }
            IntPtr resultPtr = Raw.Pkcs12Attribute.GetFriendlyName(_inner, &writeable);
            Raw.Pkcs12FfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs12FfiResultVoidBoxPickyError>(resultPtr);
            Raw.Pkcs12FfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public string GetFriendlyName()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("Pkcs12Attribute");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            IntPtr resultPtr = Raw.Pkcs12Attribute.GetFriendlyName(_inner, &writeable);
            Raw.Pkcs12FfiResultVoidBoxPickyError result = Marshal.PtrToStructure<Raw.Pkcs12FfiResultVoidBoxPickyError>(resultPtr);
            Raw.Pkcs12FfiResultVoidBoxPickyError.Destroy(resultPtr);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Pkcs12Attribute* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Pkcs12Attribute.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Pkcs12Attribute()
    {
        Dispose();
    }
}
