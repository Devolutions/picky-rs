// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky;

#nullable enable

public partial class AlgorithmIdentifier: IDisposable
{
    private unsafe Raw.AlgorithmIdentifier* _inner;

    /// <summary>
    /// Creates a managed <c>AlgorithmIdentifier</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe AlgorithmIdentifier(Raw.AlgorithmIdentifier* handle)
    {
        _inner = handle;
    }

    /// <exception cref="PickyException"></exception>
    public bool IsA(string other)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifier");
            }
            byte[] otherBuf = DiplomatUtils.StringToUtf8(other);
            nuint otherBufLength = (nuint)otherBuf.Length;
            fixed (byte* otherBufPtr = otherBuf)
            {
                Raw.X509FfiResultBoolBoxPickyError result = Raw.AlgorithmIdentifier.IsA(_inner, otherBufPtr, otherBufLength);
                if (!result.isOk)
                {
                    throw new PickyException(new PickyError(result.Err));
                }
                bool retVal = result.Ok;
                return retVal;
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public void Oid(DiplomatWriteable writable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifier");
            }
            Raw.X509FfiResultVoidBoxPickyError result = Raw.AlgorithmIdentifier.Oid(_inner, &writable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
        }
    }

    /// <exception cref="PickyException"></exception>
    public string Oid()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("AlgorithmIdentifier");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.X509FfiResultVoidBoxPickyError result = Raw.AlgorithmIdentifier.Oid(_inner, &writeable);
            if (!result.isOk)
            {
                throw new PickyException(new PickyError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.AlgorithmIdentifier* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.AlgorithmIdentifier.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~AlgorithmIdentifier()
    {
        Dispose();
    }
}
