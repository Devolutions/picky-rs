// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.Picky.Diplomat;
#pragma warning restore 0105

namespace Devolutions.Picky.Raw;

#nullable enable

[StructLayout(LayoutKind.Sequential)]
public partial struct ExtensionView
{
#if __IOS__
    private const string NativeLib = "libDevolutionsPicky.framework/libDevolutionsPicky";
#else
    private const string NativeLib = "DevolutionsPicky";
#endif

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_get_type", ExactSpelling = true)]
    public static unsafe extern ExtensionViewType GetType(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_authority_key_identifier", ExactSpelling = true)]
    public static unsafe extern AuthorityKeyIdentifier* ToAuthorityKeyIdentifier(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_subject_key_identifier", ExactSpelling = true)]
    public static unsafe extern VecU8* ToSubjectKeyIdentifier(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_key_usage", ExactSpelling = true)]
    public static unsafe extern VecU8* ToKeyUsage(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_subject_alt_name", ExactSpelling = true)]
    public static unsafe extern GeneralNameIterator* ToSubjectAltName(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_issuer_alt_name", ExactSpelling = true)]
    public static unsafe extern GeneralNameIterator* ToIssuerAltName(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_basic_constraints", ExactSpelling = true)]
    public static unsafe extern BasicConstraints* ToBasicConstraints(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_extended_key_usage", ExactSpelling = true)]
    public static unsafe extern OidIterator* ToExtendedKeyUsage(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_generic", ExactSpelling = true)]
    public static unsafe extern VecU8* ToGeneric(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_to_crl_number", ExactSpelling = true)]
    public static unsafe extern VecU8* ToCrlNumber(ExtensionView* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "ExtensionView_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(ExtensionView* self);
}
