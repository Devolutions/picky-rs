#!/usr/bin/env -S just --justfile

# This is just intended to help developer, no need in CI #

############ `just` is required ##############
# ------------------------------------------ #
# https://github.com/casey/just#installation #
# ------------------------------------------ #
# Easy way is: cargo install just            #
##############################################

default: bindings

## Diplomat installation ##

# For now, we need to use a custom diplomat revision
# supporting dotnet framework 4.7.
# Indeed, in older frameworks a few important types
# are not blittables, causing Result types to not be
# correctly send at the FFI boundary. 
diplomat_repo := "https://github.com/CBenoit/diplomat.git"
diplomat_rev  := "eee8eb628a61c54883848c1a6e6ba25186708fe2"

diplomat-install:
    cargo install --git {{diplomat_repo}} --rev {{diplomat_rev}} diplomat-tool -f

diplomat-sanity:
    @echo ">> Check Diplomat revision"
    grep "{{diplomat_repo}}" ./Cargo.toml | grep "{{diplomat_rev}}" | wc -l | xargs -I '{}' test {} -eq 2
    @echo ">> Cargo.toml is in sync with justfile"

## Native library ##

target_debug_folder   := "../target/debug/"
target_release_folder := "../target/release/"
output_lib_linux      := "libpicky.so"
output_lib_win        := "picky.dll"

dotnet_diplomat_config := "./dotnet-interop-conf.toml"
dotnet_path            := "./dotnet/"
dotnet_solution_path   := dotnet_path + "Devolutions.Picky.sln"
dotnet_lib_path        := dotnet_path + "Devolutions.Picky/"
dotnet_generated_path  := dotnet_lib_path + "Generated/"

dotnet_runtimes_path    := "../dependencies/runtimes/"
dotnet_lib_folder_linux := dotnet_runtimes_path + "linux-x64/native/"
dotnet_native_lib_linux := dotnet_lib_folder_linux + "libDevolutionsPicky.so"
dotnet_lib_folder_win   := dotnet_runtimes_path + "win-x64/native/"
dotnet_native_lib_win   := dotnet_lib_folder_win + "DevolutionsPicky.dll"

native-lib-debug: diplomat-sanity
    cargo build -p picky-ffi
    -mkdir -p {{dotnet_lib_folder_linux}}
    -cp {{target_debug_folder}}{{output_lib_linux}} {{dotnet_native_lib_linux}}
    -mkdir -p {{dotnet_lib_folder_win}}
    -cp {{target_debug_folder}}{{output_lib_win}} {{dotnet_native_lib_win}}

native-lib-release: diplomat-sanity
    cargo build -p picky-ffi --release
    -mkdir -p {{dotnet_lib_folder_linux}}
    -cp {{target_release_folder}}{{output_lib_linux}} {{dotnet_native_lib_linux}}
    -mkdir -p {{dotnet_lib_folder_win}}
    -cp {{target_release_folder}}{{output_lib_win}} {{dotnet_native_lib_win}}

## Wasm ##

target_wasm_folder := "../target/wasm32-unknown-unknown/release-opt-size/"
output_lib_wasm    := "picky.wasm"

js_path             := "./js/"
js_generated_path   := js_path + "api/"
js_docs_path        := js_path + "docs/"
js_wasm_pkg_dir     := js_path + "wasmpkg/"
js_wasm_lib         := js_wasm_pkg_dir + "picky.wasm"
js_wasm_twiggy_dir  := js_wasm_pkg_dir + "twiggy/"
js_wasm_pkg_opt_dir := js_wasm_pkg_dir + "wasm-opt/"
js_wasm_twiggy_out  := js_wasm_twiggy_dir + "picky+twiggy.txt"
js_wasm_lib_opt     := js_wasm_pkg_opt_dir + "picky.wasm"

wasm-opt-install:
    sudo npm install -g wasm-opt
        
twiggy-install:
    cargo install twiggy

wasm-lib: wasm-lib-build
    -mkdir -p {{js_wasm_pkg_dir}}
    -cp {{target_wasm_folder}}{{output_lib_wasm}} {{js_wasm_lib}}
    -mkdir -p {{js_wasm_pkg_opt_dir}}
    wasm-opt -Os {{js_wasm_lib}} -o {{js_wasm_lib_opt}}
    -mkdir -p {{js_wasm_twiggy_dir}}
    twiggy dominators {{js_wasm_lib}} -o {{js_wasm_twiggy_out}}

wasm-lib-build: diplomat-sanity
    RUSTFLAGS='-C panic=abort -C opt-level=s' cargo build --target wasm32-unknown-unknown --profile=release-opt-size -p picky-ffi

## Bindings ##

bindings: dotnet-bindings

dotnet-bindings:
    -rm {{dotnet_generated_path}}*.cs
    diplomat-tool dotnet {{dotnet_generated_path}} -l {{dotnet_diplomat_config}}
    @echo ">> .NET wrapper generated at {{dotnet_generated_path}}"

# FIXME: js bindings not yet ready
js-bindings:
    -rm {{js_generated_path}}*.js
    -rm {{js_generated_path}}*.d.ts
    -rm {{js_docs_path}}*.rst

    diplomat-tool js {{js_generated_path}} --docs {{js_docs_path}}

## Tests ##

test: test-dotnet

test-dotnet: native-lib-debug dotnet-bindings
    dotnet test {{dotnet_solution_path}} --arch win-x64
    
# FIXME: js bindings not yet ready
test-js: wasm-lib js-bindings
    cd js && npm install
    cd js && npm test
