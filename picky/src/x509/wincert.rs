use std::{
    convert::TryFrom,
    error,
    io::{self, BufReader, BufWriter},
    mem,
};

use byteorder::{BigEndian, ReadBytesExt, WriteBytesExt};
use thiserror::Error;

#[derive(Debug, Error)]
pub enum WinCertificateError {
    #[error("Revision value is wrong(expected any of {expected}, but {got} got)")]
    WrongRevisionValue { expected: String, got: u16 },
    #[error("Certificate type is wrong(expected any of {expected}, but {got} got)")]
    WrongCertificateType { expected: String, got: u16 },
    #[error("Length is wrong({minimum} at least, but {got} got)")]
    WrongLength { minimum: usize, got: usize },
    #[error("Certificate data is empty")]
    CertificateDataIsEmpty,
    #[error(transparent)]
    Io(#[from] io::Error),
    #[error(transparent)]
    Other(#[from] Box<dyn error::Error>),
}

#[derive(Clone, Debug, PartialEq)]
#[repr(align(8))]
pub struct WinCertificate {
    length: u32,
    revision: RevisionType,
    certificate_type: CertificateType,
    certificate: Vec<u8>,
}

impl WinCertificate {
    pub fn decode<V: ?Sized + AsRef<[u8]>>(data: &V) -> Result<Self, WinCertificateError> {
        let align = mem::align_of::<WinCertificate>();
        if data.as_ref().len() < 3 * align {
            return Err(WinCertificateError::WrongLength {
                minimum: 3 * align,
                got: data.as_ref().len(),
            });
        }

        let mut buffer = BufReader::new(data.as_ref());

        let length = buffer.read_u64::<BigEndian>()? as _;

        if length == 0 {
            return Err(WinCertificateError::CertificateDataIsEmpty);
        }

        let revision = RevisionType::try_from(buffer.read_u64::<BigEndian>()? as u16)?;

        let certificate_type = CertificateType::try_from(buffer.read_u64::<BigEndian>()? as u16)?;

        let mut certificate = Vec::with_capacity(length as _);

        for _ in 0..length {
            certificate.push(buffer.read_u8()?);
        }

        Ok(Self {
            length,
            revision,
            certificate_type,
            certificate,
        })
    }

    pub fn encode(self) -> Result<Vec<u8>, WinCertificateError> {
        let Self {
            length,
            revision,
            certificate_type,
            certificate,
        } = self;

        let mut buffer = BufWriter::new(Vec::new());
        buffer.write_u64::<BigEndian>(length as u64)?;
        buffer.write_u64::<BigEndian>(revision as u64)?;
        buffer.write_u64::<BigEndian>(certificate_type as u64)?;

        for elem in certificate.into_iter() {
            buffer.write_u8(elem)?;
        }

        buffer
            .into_inner()
            .map_err(|err| WinCertificateError::Other(Box::new(err) as Box<dyn error::Error>))
    }

    pub fn set_certificate<V: Into<Vec<u8>>>(&mut self, certificate: V) {
        let certificate = certificate.into();
        self.length = certificate.len() as u32;
        self.certificate = certificate;
    }

    #[inline]
    pub fn get_certificate(&self) -> &Vec<u8> {
        &self.certificate
    }
}

impl Default for WinCertificate {
    fn default() -> Self {
        WinCertificate {
            length: 0,
            revision: RevisionType::WinCertificateRevision20,
            certificate_type: CertificateType::WinCertTypePkcsSignedData,
            certificate: Vec::new(),
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
#[repr(u16)]
pub enum RevisionType {
    WinCertificateRevision10 = 0x0100,
    WinCertificateRevision20 = 0x0200,
}

impl TryFrom<u16> for RevisionType {
    type Error = WinCertificateError;
    fn try_from(value: u16) -> Result<Self, Self::Error> {
        match value {
            0x0100 => Ok(RevisionType::WinCertificateRevision10),
            0x0200 => Ok(RevisionType::WinCertificateRevision20),
            _ => Err(WinCertificateError::WrongRevisionValue {
                expected: format!("{:?}", [0x0100, 0x0200]),
                got: value,
            }),
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
#[repr(u16)]
pub enum CertificateType {
    WinCertTypeX509 = 0x0001,
    WinCertTypePkcsSignedData = 0x0002,
    WinCertTypeReserved1 = 0x0003,
    WinCertTypePkcs1Sign = 0x0009,
}

impl TryFrom<u16> for CertificateType {
    type Error = WinCertificateError;

    fn try_from(value: u16) -> Result<Self, Self::Error> {
        match value {
            0x0001 => Ok(CertificateType::WinCertTypeX509),
            0x0002 => Ok(CertificateType::WinCertTypePkcsSignedData),
            0x0003 => Ok(CertificateType::WinCertTypeReserved1),
            0x0009 => Ok(CertificateType::WinCertTypePkcs1Sign),
            _ => Err(WinCertificateError::WrongCertificateType {
                expected: format!("{:?}", [0x0001, 0x0002, 0x0003, 0x0009]),
                got: value,
            }),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    const WINCERT_WITH_INVALID_LENGTH: [u8; 24] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // -> WIN_CERTIFICATE::dwLength = 0x00 = 0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, // -> WIN_CERTIFICATE::wRevision = 0x0100 = WIN_CERT_REVISION_1_0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, // -> WIN_CERTIFICATE::wCertificateType = 0x01 = WIN_CERTIFICATE::WIN_CERT_TYPE_X509
              // empty WIN_CERTIFICATE::bCertificate field
    ];

    const WINCERT_WITH_ONE_BYTE_CERTIFICATE: [u8; 25] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // -> WIN_CERTIFICATE::dwLength = 0x00 = 1
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, // -> WIN_CERTIFICATE::wRevision = 0x0100 = WIN_CERT_REVISION_1_0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, // -> WIN_CERTIFICATE::wCertificateType = 0x01 = WIN_CERTIFICATE::WIN_CERT_TYPE_X509
        0x01, // 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // -> WIN_CERTIFICATE::bCertificate = bCertificate[0] = 1
    ];

    const WINCERT_WITH_TEN_BYTES_CERTIFICATE: [u8; 34] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, // -> WIN_CERTIFICATE::dwLength = 0x0A = 10
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
        0x00, // -> WIN_CERTIFICATE::wRevision = 0x0200 = WIN_CERT_REVISION_2_0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x09, // -> WIN_CERTIFICATE::wCertificateType = 0x09 = WIN_CERTIFICATE::WinCertTypePkcs1Sign
        0x01, 0x20, 0x03, 0x40, 0x05, 0x60, 0x70, 0x08, // -> WIN_CERTIFICATE::bCertificate = bCertificate[10]
        0x90, 0x01,
    ];

    const WINCERT_WITH_INVALID_REVISION: [u8; 25] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // -> WIN_CERTIFICATE::dwLength = 0x00 = 1
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // -> WIN_CERTIFICATE::wRevision = 0x0300(not existing)
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, // -> WIN_CERTIFICATE::wCertificateType = 0x01 = WIN_CERTIFICATE::WIN_CERT_TYPE_X509
        0x01, // 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // -> WIN_CERTIFICATE::bCertificate = bCertificate[0] = 1
    ];

    const WINCERT_WITH_X509_CERTIFICATE: [u8; 870] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4E, // -> WIN_CERTIFICATE::dwLength = 0x034E = 846
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
        0x00, // -> WIN_CERTIFICATE::wRevision = 0x0200 = WIN_CERT_REVISION_2_0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, // -> WIN_CERTIFICATE::wCertificateType = 0x01 = WIN_CERTIFICATE::WIN_CERT_TYPE_X509
        0x30, 0x82, 0x03, 0x4A, 0x30, 0x82, 0x02, 0x32, 0xA0, 0x03, 0x02, 0x01, // X509 certificate
        0x02, 0x02, 0x10, 0x44, 0xAF, 0xB0, 0x80, 0xD6, 0xA3, 0x27, 0xBA, 0x89, 0x30, 0x39, 0x86, 0x2E, 0xF8, 0x40,
        0x6B, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x3F,
        0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x1B, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6C,
        0x20, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x43,
        0x6F, 0x2E, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0E, 0x44, 0x53, 0x54, 0x20, 0x52,
        0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x20, 0x58, 0x33, 0x30, 0x1E, 0x17, 0x0D, 0x30, 0x30, 0x30, 0x39, 0x33,
        0x30, 0x32, 0x31, 0x31, 0x32, 0x31, 0x39, 0x5A, 0x17, 0x0D, 0x32, 0x31, 0x30, 0x39, 0x33, 0x30, 0x31, 0x34,
        0x30, 0x31, 0x31, 0x35, 0x5A, 0x30, 0x3F, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x1B,
        0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6C, 0x20, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20,
        0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x43, 0x6F, 0x2E, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03,
        0x13, 0x0E, 0x44, 0x53, 0x54, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x20, 0x58, 0x33, 0x30, 0x82,
        0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
        0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xDF, 0xAF, 0xE9, 0x97, 0x50,
        0x08, 0x83, 0x57, 0xB4, 0xCC, 0x62, 0x65, 0xF6, 0x90, 0x82, 0xEC, 0xC7, 0xD3, 0x2C, 0x6B, 0x30, 0xCA, 0x5B,
        0xEC, 0xD9, 0xC3, 0x7D, 0xC7, 0x40, 0xC1, 0x18, 0x14, 0x8B, 0xE0, 0xE8, 0x33, 0x76, 0x49, 0x2A, 0xE3, 0x3F,
        0x21, 0x49, 0x93, 0xAC, 0x4E, 0x0E, 0xAF, 0x3E, 0x48, 0xCB, 0x65, 0xEE, 0xFC, 0xD3, 0x21, 0x0F, 0x65, 0xD2,
        0x2A, 0xD9, 0x32, 0x8F, 0x8C, 0xE5, 0xF7, 0x77, 0xB0, 0x12, 0x7B, 0xB5, 0x95, 0xC0, 0x89, 0xA3, 0xA9, 0xBA,
        0xED, 0x73, 0x2E, 0x7A, 0x0C, 0x06, 0x32, 0x83, 0xA2, 0x7E, 0x8A, 0x14, 0x30, 0xCD, 0x11, 0xA0, 0xE1, 0x2A,
        0x38, 0xB9, 0x79, 0x0A, 0x31, 0xFD, 0x50, 0xBD, 0x80, 0x65, 0xDF, 0xB7, 0x51, 0x63, 0x83, 0xC8, 0xE2, 0x88,
        0x61, 0xEA, 0x4B, 0x61, 0x81, 0xEC, 0x52, 0x6B, 0xB9, 0xA2, 0xE2, 0x4B, 0x1A, 0x28, 0x9F, 0x48, 0xA3, 0x9E,
        0x0C, 0xDA, 0x09, 0x8E, 0x3E, 0x17, 0x2E, 0x1E, 0xDD, 0x20, 0xDF, 0x5B, 0xC6, 0x2A, 0x8A, 0xAB, 0x2E, 0xBD,
        0x70, 0xAD, 0xC5, 0x0B, 0x1A, 0x25, 0x90, 0x74, 0x72, 0xC5, 0x7B, 0x6A, 0xAB, 0x34, 0xD6, 0x30, 0x89, 0xFF,
        0xE5, 0x68, 0x13, 0x7B, 0x54, 0x0B, 0xC8, 0xD6, 0xAE, 0xEC, 0x5A, 0x9C, 0x92, 0x1E, 0x3D, 0x64, 0xB3, 0x8C,
        0xC6, 0xDF, 0xBF, 0xC9, 0x41, 0x70, 0xEC, 0x16, 0x72, 0xD5, 0x26, 0xEC, 0x38, 0x55, 0x39, 0x43, 0xD0, 0xFC,
        0xFD, 0x18, 0x5C, 0x40, 0xF1, 0x97, 0xEB, 0xD5, 0x9A, 0x9B, 0x8D, 0x1D, 0xBA, 0xDA, 0x25, 0xB9, 0xC6, 0xD8,
        0xDF, 0xC1, 0x15, 0x02, 0x3A, 0xAB, 0xDA, 0x6E, 0xF1, 0x3E, 0x2E, 0xF5, 0x5C, 0x08, 0x9C, 0x3C, 0xD6, 0x83,
        0x69, 0xE4, 0x10, 0x9B, 0x19, 0x2A, 0xB6, 0x29, 0x57, 0xE3, 0xE5, 0x3D, 0x9B, 0x9F, 0xF0, 0x02, 0x5D, 0x02,
        0x03, 0x01, 0x00, 0x01, 0xA3, 0x42, 0x30, 0x40, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF,
        0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04,
        0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0xC4, 0xA7,
        0xB1, 0xA4, 0x7B, 0x2C, 0x71, 0xFA, 0xDB, 0xE1, 0x4B, 0x90, 0x75, 0xFF, 0xC4, 0x15, 0x60, 0x85, 0x89, 0x10,
        0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01,
        0x01, 0x00, 0xA3, 0x1A, 0x2C, 0x9B, 0x17, 0x00, 0x5C, 0xA9, 0x1E, 0xEE, 0x28, 0x66, 0x37, 0x3A, 0xBF, 0x83,
        0xC7, 0x3F, 0x4B, 0xC3, 0x09, 0xA0, 0x95, 0x20, 0x5D, 0xE3, 0xD9, 0x59, 0x44, 0xD2, 0x3E, 0x0D, 0x3E, 0xBD,
        0x8A, 0x4B, 0xA0, 0x74, 0x1F, 0xCE, 0x10, 0x82, 0x9C, 0x74, 0x1A, 0x1D, 0x7E, 0x98, 0x1A, 0xDD, 0xCB, 0x13,
        0x4B, 0xB3, 0x20, 0x44, 0xE4, 0x91, 0xE9, 0xCC, 0xFC, 0x7D, 0xA5, 0xDB, 0x6A, 0xE5, 0xFE, 0xE6, 0xFD, 0xE0,
        0x4E, 0xDD, 0xB7, 0x00, 0x3A, 0xB5, 0x70, 0x49, 0xAF, 0xF2, 0xE5, 0xEB, 0x02, 0xF1, 0xD1, 0x02, 0x8B, 0x19,
        0xCB, 0x94, 0x3A, 0x5E, 0x48, 0xC4, 0x18, 0x1E, 0x58, 0x19, 0x5F, 0x1E, 0x02, 0x5A, 0xF0, 0x0C, 0xF1, 0xB1,
        0xAD, 0xA9, 0xDC, 0x59, 0x86, 0x8B, 0x6E, 0xE9, 0x91, 0xF5, 0x86, 0xCA, 0xFA, 0xB9, 0x66, 0x33, 0xAA, 0x59,
        0x5B, 0xCE, 0xE2, 0xA7, 0x16, 0x73, 0x47, 0xCB, 0x2B, 0xCC, 0x99, 0xB0, 0x37, 0x48, 0xCF, 0xE3, 0x56, 0x4B,
        0xF5, 0xCF, 0x0F, 0x0C, 0x72, 0x32, 0x87, 0xC6, 0xF0, 0x44, 0xBB, 0x53, 0x72, 0x6D, 0x43, 0xF5, 0x26, 0x48,
        0x9A, 0x52, 0x67, 0xB7, 0x58, 0xAB, 0xFE, 0x67, 0x76, 0x71, 0x78, 0xDB, 0x0D, 0xA2, 0x56, 0x14, 0x13, 0x39,
        0x24, 0x31, 0x85, 0xA2, 0xA8, 0x02, 0x5A, 0x30, 0x47, 0xE1, 0xDD, 0x50, 0x07, 0xBC, 0x02, 0x09, 0x90, 0x00,
        0xEB, 0x64, 0x63, 0x60, 0x9B, 0x16, 0xBC, 0x88, 0xC9, 0x12, 0xE6, 0xD2, 0x7D, 0x91, 0x8B, 0xF9, 0x3D, 0x32,
        0x8D, 0x65, 0xB4, 0xE9, 0x7C, 0xB1, 0x57, 0x76, 0xEA, 0xC5, 0xB6, 0x28, 0x39, 0xBF, 0x15, 0x65, 0x1C, 0xC8,
        0xF6, 0x77, 0x96, 0x6A, 0x0A, 0x8D, 0x77, 0x0B, 0xD8, 0x91, 0x0B, 0x04, 0x8E, 0x07, 0xDB, 0x29, 0xB6, 0x0A,
        0xEE, 0x9D, 0x82, 0x35, 0x35, 0x10,
    ];

    #[test]
    fn decode_with_invalid_length() {
        let decoded = WinCertificate::decode(WINCERT_WITH_INVALID_LENGTH.as_ref());
        assert!(decoded.is_err());
    }

    #[test]
    fn decode_wincert_with_one_byte_certificate() {
        let decoded = WinCertificate::decode(WINCERT_WITH_ONE_BYTE_CERTIFICATE.as_ref()).unwrap();

        pretty_assertions::assert_eq!(decoded.length, 1);
        pretty_assertions::assert_eq!(decoded.revision, RevisionType::WinCertificateRevision10);
        pretty_assertions::assert_eq!(decoded.certificate_type, CertificateType::WinCertTypeX509);
        pretty_assertions::assert_eq!(decoded.certificate, vec![1]);
    }

    #[test]
    fn encode_into_decode_wincert_with_one_byte_certificate() {
        let wincert = WinCertificate {
            length: 1,
            revision: RevisionType::WinCertificateRevision10,
            certificate_type: CertificateType::WinCertTypeX509,
            certificate: vec![1],
        };

        let encoded = wincert.encode().unwrap();
        assert_eq!(encoded, WINCERT_WITH_ONE_BYTE_CERTIFICATE.to_vec());
    }

    #[test]
    fn decode_wincert_with_ten_bytes_certificate() {
        let decoded = WinCertificate::decode(WINCERT_WITH_TEN_BYTES_CERTIFICATE.as_ref()).unwrap();

        pretty_assertions::assert_eq!(decoded.length, 10);
        pretty_assertions::assert_eq!(decoded.revision, RevisionType::WinCertificateRevision20);
        pretty_assertions::assert_eq!(decoded.certificate_type, CertificateType::WinCertTypePkcs1Sign);
        pretty_assertions::assert_eq!(decoded.certificate, vec![1, 32, 3, 64, 5, 96, 112, 8, 144, 1]);
    }

    #[test]
    fn encode_into_decode_wincert_with_ten_bytes_certificate() {
        let wincert = WinCertificate {
            length: 10,
            revision: RevisionType::WinCertificateRevision20,
            certificate_type: CertificateType::WinCertTypePkcs1Sign,
            certificate: vec![1, 32, 3, 64, 5, 96, 112, 8, 144, 1],
        };

        let encoded = wincert.encode().unwrap();
        assert_eq!(encoded, WINCERT_WITH_TEN_BYTES_CERTIFICATE.to_vec());
    }

    #[test]
    fn decode_wincert_with_invalid_revision() {
        let decoded = WinCertificate::decode(WINCERT_WITH_INVALID_REVISION.as_ref());
        assert!(decoded.is_err());
    }

    #[test]
    fn decode_wincert_with_x509_certificate() {
        let decoded = WinCertificate::decode(WINCERT_WITH_X509_CERTIFICATE.as_ref());
        assert!(decoded.is_ok());
    }

    #[test]
    fn encode_wincert_with_x509_certificate() {
        let wincert = WinCertificate {
            length: 846,
            revision: RevisionType::WinCertificateRevision20,
            certificate_type: CertificateType::WinCertTypeX509,
            certificate: WINCERT_WITH_X509_CERTIFICATE[24..].to_vec(),
        };

        let encoded = wincert.encode().unwrap();
        pretty_assertions::assert_eq!(encoded, WINCERT_WITH_X509_CERTIFICATE.to_vec());
    }
}
