name: nuget package
# name: Publish NuGet package
on: workflow_dispatch
jobs:
  build-native:
    name: native build
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        os: [ win, osx, linux, ios, android ]
        arch: [ x86, x64, arm, arm64 ]
        include:
          - os: win
            runner: windows-2022
          - os: osx
            runner: macos-11
          - os: linux
            runner: ubuntu-18.04
          - os: ios
            runner: macos-11
          - os: android
            runner: windows-2022
        exclude:
          - arch: arm
            os: win
          - arch: arm
            os: osx
          - arch: arm
            os: linux
          - arch: arm
            os: ios
          - arch: x86
            os: win
          - arch: x86
            os: osx
          - arch: x86
            os: linux
          - arch: x86
            os: ios

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Install Android NDK
        if: matrix.os == 'android'
        shell: pwsh
        run: |
          $CargoConfigFile = "~/.cargo/config"
          $AndroidNdkHome = ${Env:ANDROID_NDK_HOME} -Replace '\\', '\\'
          $AndroidToolchainBin="${AndroidNdkHome}\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin"

          echo "[target.i686-linux-android]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchainBin\\i686-linux-android16-clang.exe`"" >> $CargoConfigFile

          echo "[target.x86_64-linux-android]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchainBin\\x86_64-linux-android21-clang.exe`"" >> $CargoConfigFile

          echo "[target.armv7-linux-androideabi]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchainBin\\armv7a-linux-androideabi21-clang.exe`"" >> $CargoConfigFile

          echo "[target.aarch64-linux-android]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchainBin\\aarch64-linux-android21-clang.exe`"" >> $CargoConfigFile
      
      # - name: Work around ndk-bundle symlink issue
      #   if: matrix.os == 'android'
      #   shell: pwsh
      #   run: |
      #     $sdkRoot = "C:\Android\android-sdk"
      #     $sdkManager = "$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat"
      #     Install-AndroidSDKPackages -AndroidSDKManagerPath $sdkManager `
      #                               -AndroidSDKRootPath $sdkRoot `
      #                               -AndroidPackages "ndk;21.4.7075529"
      #     $ndkRoot = "$sdkRoot\ndk-bundle"
      #     New-Item -Path $ndkRoot -ItemType SymbolicLink -Value "$sdkRoot\ndk\21.4.7075529" -Force
  
      - name: Build picky (${{matrix.os}}-${{matrix.arch}})
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1

          $DotNetOs = '${{matrix.os}}'
          $DotNetArch = '${{matrix.arch}}'
          $DotNetRid = '${{matrix.os}}-${{matrix.arch}}'
          $RustArch = @{'x64'='x86_64';'arm64'='aarch64';
            'x86'='i686';'arm'='armv7'}[$DotNetArch]
          $RustPlatform = @{'win'='pc-windows-msvc';
            'osx'='apple-darwin';'ios'='apple-ios';
            'linux'='unknown-linux-gnu';'android'='linux-android'}[$DotNetOs]
          $LibPrefix = @{'win'='';'osx'='lib';'ios'='lib';
            'linux'='lib';'android'='lib'}[$DotNetOs]
          $LibSuffix = @{'win'='.dll';'osx'='.dylib';'ios'='.a';
            'linux'='.so';'android'='.so'}[$DotNetOs]
          $RustTarget = "$RustArch-$RustPlatform"

          if (($DotNetOs -eq 'android') -and ($DotNetArch -eq 'arm')) {
            $RustTarget = "armv7-linux-androideabi"
          }

          rustup target add $RustTarget

          if ($DotNetOs -eq 'win') {
            $Env:RUSTFLAGS="-C target-feature=+crt-static"
          }

          if ($DotNetOs -eq 'ios') {
            $CargoToml = Get-Content .\ffi\Cargo.toml
            $CargoToml = $CargoToml | ForEach-Object {
              if ($_.StartsWith("crate-type")) { "crate-type = [`"staticlib`"]" } else { $_ }
            }
            Set-Content -Path .\ffi\Cargo.toml -Value $CargoToml
          }

          if ($RustTarget -eq 'aarch64-unknown-linux-gnu') {
            sudo apt install gcc-aarch64-linux-gnu
            $Env:RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"
          }

          $CsprojXml = [Xml] (Get-Content .\ffi\dotnet\Devolutions.Picky\Devolutions.Picky.csproj)
          $ProjectVersion = $CsprojXml.Project.PropertyGroup.Version | Select-Object -First 1
          $PackageVersion = $ProjectVersion -Replace "^(\d+)\.(\d+)\.(\d+)(\.0)$", "`$1.`$2.`$3"

          $CargoToml = Get-Content .\ffi\Cargo.toml
          $CargoToml = $CargoToml | ForEach-Object {
            if ($_.StartsWith("version =")) { "version = `"$PackageVersion`"" } else { $_ }
          }
          Set-Content -Path .\ffi\Cargo.toml -Value $CargoToml

          cargo build -p picky-ffi --release --target $RustTarget

          $OutputLibraryName = "${LibPrefix}picky$LibSuffix"
          $RenamedLibraryName = "${LibPrefix}DevolutionsPicky$LibSuffix"
          $OutputLibrary = Join-Path "target" $RustTarget 'release' $OutputLibraryName
          $OutputPath = Join-Path "dependencies" "runtimes" $DotNetRid "native"
          New-Item -ItemType Directory -Path $OutputPath | Out-Null
          Copy-Item $OutputLibrary $(Join-Path $OutputPath $RenamedLibraryName)

      - name: Upload native components
        uses: actions/upload-artifact@v2
        with:
          name: picky-${{matrix.os}}-${{matrix.arch}}
          path: dependencies/runtimes/${{matrix.os}}-${{matrix.arch}}

  build-managed:
    name: managed build
    runs-on: windows-2022
    needs: build-native

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Prepare dependencies
        run: |
          New-Item -ItemType Directory -Path "dependencies/runtimes" | Out-Null

      - name: Download native components
        uses: actions/download-artifact@v2
        with:
          path: dependencies/runtimes

      - name: Rename dependencies
        run: |
          Set-Location "dependencies/runtimes"
          $(Get-Item ".\picky-*") | ForEach-Object { Rename-Item $_ $_.Name.Replace("picky-", "") }
          Get-ChildItem * -Recurse

      - name: Build picky (managed)
        shell: pwsh
        run: |
          dotnet build .\ffi\dotnet\Devolutions.Picky.sln -o package

      - name: Upload managed components
        uses: actions/upload-artifact@v2
        with:
          name: picky-nupkg
          path: package/*.nupkg
