name: Publish NuGet package

on:
  workflow_dispatch:
  schedule:
    - cron: '21 3 * * 1' # 3:21 AM UTC every Monday

jobs:
  build-native:
    name: native build
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        os: [ android ]
        arch: [ x86, x64, arm, arm64 ]
        include:
          - os: android
            runner: ubuntu-20.04

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Configure Android NDK
        if: runner.os == 'linux'
        shell: pwsh
        run: |
          $CargoConfigFile = "~/.cargo/config"
          $AndroidToolchain="${Env:ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64"
          rustc --version

          Get-ChildItem "libunwind.a" -Recurse | ForEach-Object {
            $libunwind = $_.FullName
            $libgcc = Join-Path $_.DirectoryName "libgcc.a"
            if (-Not (Test-Path $libgcc)) {
                Write-Host $libgcc
                Copy-Item $libunwind $libgcc
            }
          }

          echo "[target.i686-linux-android]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchain/bin/i686-linux-android19-clang`"" >> $CargoConfigFile
          echo "[target.x86_64-linux-android]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchain/bin/x86_64-linux-android21-clang`"" >> $CargoConfigFile
          echo "[target.armv7-linux-androideabi]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchain/bin/armv7a-linux-androideabi21-clang`"" >> $CargoConfigFile
          echo "[target.aarch64-linux-android]" >> $CargoConfigFile
          echo "linker=`"$AndroidToolchain/bin/aarch64-linux-android21-clang`"" >> $CargoConfigFile

      - name: Build picky (${{matrix.os}}-${{matrix.arch}})
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1

          $DotNetOs = '${{matrix.os}}'
          $DotNetArch = '${{matrix.arch}}'
          $DotNetRid = '${{matrix.os}}-${{matrix.arch}}'
          $RustArch = @{'x64'='x86_64';'arm64'='aarch64';
            'x86'='i686';'arm'='armv7'}[$DotNetArch]
          $RustPlatform = @{'win'='pc-windows-msvc';
            'osx'='apple-darwin';'ios'='apple-ios';
            'linux'='unknown-linux-gnu';'android'='linux-android'}[$DotNetOs]
          $LibPrefix = @{'win'='';'osx'='lib';'ios'='lib';
            'linux'='lib';'android'='lib'}[$DotNetOs]
          $LibSuffix = @{'win'='.dll';'osx'='.dylib';'ios'='.a';
            'linux'='.so';'android'='.so'}[$DotNetOs]
          $RustTarget = "$RustArch-$RustPlatform"

          if (($DotNetOs -eq 'android') -and ($DotNetArch -eq 'arm')) {
            $RustTarget = "armv7-linux-androideabi"
          }

          rustup target add $RustTarget

          if ($DotNetOs -eq 'win') {
            $Env:RUSTFLAGS="-C target-feature=+crt-static"
          }

          if ($DotNetOs -eq 'ios') {
            $CargoToml = Get-Content .\ffi\Cargo.toml
            $CargoToml = $CargoToml | ForEach-Object {
              if ($_.StartsWith("crate-type")) { "crate-type = [`"staticlib`"]" } else { $_ }
            }
            Set-Content -Path .\ffi\Cargo.toml -Value $CargoToml
          }

          if ($RustTarget -eq 'aarch64-unknown-linux-gnu') {
            sudo apt install gcc-aarch64-linux-gnu
            $Env:RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"
          }

          $CsprojXml = [Xml] (Get-Content .\ffi\dotnet\Devolutions.Picky\Devolutions.Picky.csproj)
          $ProjectVersion = $CsprojXml.Project.PropertyGroup.Version | Select-Object -First 1
          $PackageVersion = $ProjectVersion -Replace "^(\d+)\.(\d+)\.(\d+)(\.0)$", "`$1.`$2.`$3"

          $CargoToml = Get-Content .\ffi\Cargo.toml
          $CargoToml = $CargoToml | ForEach-Object {
            if ($_.StartsWith("version =")) { "version = `"$PackageVersion`"" } else { $_ }
          }
          Set-Content -Path .\ffi\Cargo.toml -Value $CargoToml

          cargo build -p picky-ffi --release --target $RustTarget

          $OutputLibraryName = "${LibPrefix}picky$LibSuffix"
          $RenamedLibraryName = "${LibPrefix}DevolutionsPicky$LibSuffix"
          $OutputLibrary = Join-Path "target" $RustTarget 'release' $OutputLibraryName
          $OutputPath = Join-Path "dependencies" "runtimes" $DotNetRid "native"
          New-Item -ItemType Directory -Path $OutputPath | Out-Null
          Copy-Item $OutputLibrary $(Join-Path $OutputPath $RenamedLibraryName)

      - name: Upload native components
        uses: actions/upload-artifact@v2
        with:
          name: picky-${{matrix.os}}-${{matrix.arch}}
          path: dependencies/runtimes/${{matrix.os}}-${{matrix.arch}}
