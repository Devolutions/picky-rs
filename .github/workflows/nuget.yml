name: nuget package
on: workflow_dispatch
jobs:
  build-native:
    name: native build
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        os: [ win, osx, linux, ios, android ]
        arch: [ x64, arm64 ]
        include:
          - os: win
            runner: windows-2022
          - os: osx
            runner: macos-11
          - os: linux
            runner: ubuntu-18.04
          - os: ios
            runner: macos-11
          - os: android
            runner: ubuntu-20.04
        exclude:
          - arch: x64
            os: ios

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Install Android NDK
        if: matrix.os == 'android'
        shell: pwsh
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
          unzip -q android-ndk-r23b-linux.zip -d /tmp
          sudo mv /tmp/android-ndk-r23b /opt/android-ndk
          echo "ANDROID_NDK=/opt/android-ndk" >> $Env:GITHUB_ENV
          echo "ANDROID_NDK_HOME=/opt/android-ndk" >> $Env:GITHUB_ENV

      - name: Build picky (${{matrix.os}}-${{matrix.arch}})
        shell: pwsh
        run: |
          $DotNetOs = '${{matrix.os}}'
          $DotNetArch = '${{matrix.arch}}'
          $DotNetRid = '${{matrix.os}}-${{matrix.arch}}'
          $RustArch = @{'x64'='x86_64';'arm64'='aarch64';
            'x86'='i686';'arm'='armv7'}[$DotNetArch]
          $RustPlatform = @{'win'='pc-windows-msvc';
            'osx'='apple-darwin';'ios'='apple-ios';
            'linux'='unknown-linux-gnu';'android'='linux-android'}[$DotNetOs]
          $LibPrefix = @{'win'='';'osx'='lib';'ios'='lib';
            'linux'='lib';'android'='lib'}[$DotNetOs]
          $LibSuffix = @{'win'='.dll';'osx'='.dylib';'ios'='.a';
            'linux'='.so';'android'='.so'}[$DotNetOs]
          $RustTarget = "$RustArch-$RustPlatform"

          & rustup target add $RustTarget

          if ($DotNetOs -eq 'win') {
            $Env:RUSTFLAGS="-C target-feature=+crt-static"
          }

          if ($DotNetOs -eq 'ios') {
            $CargoToml = Get-Content .\c-api\Cargo.toml
            $CargoToml = $CargoToml | ForEach-Object {
              if ($_.StartsWith("crate-type")) { "crate-type = [`"staticlib`"]" } else { $_ }
            }
            Set-Content -Path .\c-api\Cargo.toml -Value $CargoToml
          }

          if ($RustTarget -eq 'aarch64-unknown-linux-gnu') {
            & sudo apt install gcc-aarch64-linux-gnu
            $Env:RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"
          }

          & rustup update

          & cargo build -p picky-ffi --release --target $RustTarget

          $LibraryName = "${LibPrefix}picky$LibSuffix"
          $OutputLibrary = Join-Path "target" $RustTarget 'release' $LibraryName
          $OutputPath = Join-Path "dependencies" "runtimes" $DotNetRid "native"
          New-Item -ItemType Directory -Path $OutputPath | Out-Null
          Copy-Item $OutputLibrary $(Join-Path $OutputPath $LibraryName)

      - name: Upload native components
        uses: actions/upload-artifact@v2
        with:
          name: picky-${{matrix.os}}-${{matrix.arch}}
          path: dependencies/runtimes/${{matrix.os}}-${{matrix.arch}}

  build-managed:
    name: managed build
    runs-on: windows-2022
    needs: build-native

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v2

      - name: Prepare dependencies
        run: |
          New-Item -ItemType Directory -Path "dependencies/runtimes" | Out-Null

      - name: Download native components
        uses: actions/download-artifact@v2
        with:
          path: dependencies/runtimes

      - name: Rename dependencies
        run: |
          Set-Location "dependencies/runtimes"
          $(Get-Item ".\picky-*") | ForEach-Object { Rename-Item $_ $_.Name.Replace("picky-", "") }
          Get-ChildItem * -Recurse

      - name: Build picky (managed)
        shell: pwsh
        run: |
          & dotnet build .\c-api\dotnet\Devolutions.Picky.sln -o package

      - name: Upload managed components
        uses: actions/upload-artifact@v2
        with:
          name: picky-nupkg
          path: package/*.nupkg
