name: Release

on:
  workflow_dispatch:
    inputs:
      run-id:
        description: 'The CI workflow run ID with the artifacts to release'
        required: true

concurrency: picky-release

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-18.04
    outputs: 
      matrix: ${{ steps.get-commit.outputs.commit }}

    steps:
      - name: Get commit
        id: get-commit
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: |
          $RunJson = gh api /repos/devolutions/picky-rs/actions/runs/${{ github.event.inputs.run-id }}
          $Run = $RunJson | ConvertFrom-Json
          echo "::set-output name=commit::$($Run.head_sha)"

  containers:
    name: Containers [${{ matrix.os }} ${{ matrix.base-image }}]
    runs-on: ${{ matrix.runner }}
    environment: build-and-publish
    needs: preflight
    strategy:
      fail-fast: true
      matrix:
        arch: [ x86_64 ]
        os: [ windows, linux ]
        base-image: [buster, servercore-ltsc2019, nanoserver-1809 ]

        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-18.04
        exclude:
          - os: windows
            base-image: buster
          - os: linux
            base-image: servercore-ltsc2019
          - os: linux
            base-image: nanoserver-1809

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.preflight.outputs.commit }}

      - name: Rename picky-server directory
        shell: pwsh
        run: Rename-Item -Path picky-server -NewName server -Force

      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          $Data = Select-String -Pattern 'version' $(Join-Path server Cargo.toml) | Select-Object -First 1
          $Data -Match "(\d*\.\d*\.\d*)"
          echo "::set-output name=version::$($matches[0])"

      - name: Download and copy artifacts
        id: download
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        run: |
          gh run download ${{ github.event.inputs.run-id }} --dir "$Env:RUNNER_TEMP" --name picky
          $SourceFile = "picky-server"

          if ($Env:RUNNER_OS -Eq "Windows") {
            $SourceFile = "$($SourceFile).exe"
          }

          $SourcePath = Join-Path "$Env:RUNNER_TEMP" ${{ matrix.os }} ${{ matrix.arch }} $SourceFile
          $TargetPath = Join-Path $pwd $SourceFile
          Copy-Item $SourcePath $TargetPath

          if ($Env:RUNNER_OS -eq "Linux") {
            Invoke-Expression "chmod +x $TargetPath"
          }

      - name: Build container
        id: build-container
        shell: pwsh
        run: |
          $ImageName = "devolutions/picky:${{ steps.get-version.outputs.version }}-${{ matrix.base-image }}"
          if ($Env:RUNNER_OS -Eq "Windows") {
            if ("${{ matrix.base-image }}" -Eq "nanoserver-1809") {
              docker build --build-arg FROM_IMAGE=mcr.microsoft.com/windows/nanoserver:1809 -t "$ImageName" -f DockerFile-win2k19 .
            } else {
              docker build -t "$ImageName" -f DockerFile-win2k19 .
            }
          } else {
            docker build -t "$ImageName" .
          }
          echo "::set-output name=image-name::$ImageName"

      - name: Push container
        shell: pwsh
        run: |
          echo ${{ secrets.DOCKER_HUB_BOT_PASSWORD }} | docker login -u devolutionsbot --password-stdin
          docker push ${{ steps.build-container.outputs.image-name }}